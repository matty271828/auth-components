{"version":3,"file":"auth-GZFwuRYN.js","sources":["../src/lib/utils.ts","../src/lib/api.ts","../src/lib/auth.ts"],"sourcesContent":["import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\n/**\n * Get the base API URL for the application\n * Uses the same logic as the auth client - current domain\n */\nexport function getApiUrl(): string {\n  return window.location.origin;\n}\n\n// Common passwords to check against\nconst COMMON_PASSWORDS = [\n  'password', '123456', '123456789', 'qwerty', 'abc123', 'password123',\n  'admin', 'letmein', 'welcome', 'monkey', 'dragon', 'master', 'sunshine',\n  'princess', 'qwerty123', 'football', 'baseball', 'superman', 'batman',\n  'trustno1', 'hello123', 'freedom', 'whatever', 'qazwsx', 'password1',\n  '12345678', '1234567', '123123', '111111', '000000', 'qwertyuiop',\n  'asdfghjkl', 'zxcvbnm', '1q2w3e4r', '1qaz2wsx', 'q1w2e3r4', 'abcd1234'\n];\n\nexport interface PasswordRequirement {\n  id: string;\n  label: string;\n  test: (password: string) => boolean;\n  met: boolean;\n}\n\nexport interface PasswordStrength {\n  score: number; // 0-5\n  label: string;\n  color: string;\n  requirements: PasswordRequirement[];\n}\n\n/**\n * Check if password contains sequential patterns\n */\nfunction hasSequentialPatterns(password: string): boolean {\n  const sequences = [\n    '123456', '234567', '345678', '456789', '567890',\n    'abcdef', 'bcdefg', 'cdefgh', 'defghi', 'efghij',\n    'ghijkl', 'hijklm', 'ijklmn', 'jklmno', 'klmnop',\n    'lmnopq', 'mnopqr', 'nopqrs', 'opqrst', 'pqrstu',\n    'qrstuv', 'rstuvw', 'stuvwx', 'tuvwxy', 'uvwxyz',\n    'qwerty', 'wertyu', 'ertyui', 'rtyuio', 'tyuiop',\n    'asdfgh', 'sdfghj', 'dfghjk', 'fghjkl', 'ghjklz'\n  ];\n  \n  return sequences.some(seq => password.toLowerCase().includes(seq));\n}\n\n/**\n * Check if password has more than 2 consecutive identical characters\n */\nfunction hasRepeatedCharacters(password: string): boolean {\n  for (let i = 0; i < password.length - 2; i++) {\n    if (password[i] === password[i + 1] && password[i] === password[i + 2]) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Validate password strength and return detailed feedback\n */\nexport function validatePassword(password: string): PasswordStrength {\n  const requirements: PasswordRequirement[] = [\n    {\n      id: 'length',\n      label: 'At least 12 characters',\n      test: (pwd) => pwd.length >= 12,\n      met: false\n    },\n    {\n      id: 'uppercase',\n      label: 'At least one uppercase letter (A-Z)',\n      test: (pwd) => /[A-Z]/.test(pwd),\n      met: false\n    },\n    {\n      id: 'lowercase',\n      label: 'At least one lowercase letter (a-z)',\n      test: (pwd) => /[a-z]/.test(pwd),\n      met: false\n    },\n    {\n      id: 'numbers',\n      label: 'At least one number (0-9)',\n      test: (pwd) => /\\d/.test(pwd),\n      met: false\n    },\n    {\n      id: 'special',\n      label: 'At least one special character (!@#$%^&*()_+-=[]{}|;:,.<>?)',\n      test: (pwd) => /[!@#$%^&*()_+\\-=\\[\\]{}|;:,.<>?]/.test(pwd),\n      met: false\n    },\n    {\n      id: 'common',\n      label: 'Not a common password',\n      test: (pwd) => !COMMON_PASSWORDS.includes(pwd.toLowerCase()),\n      met: false\n    },\n    {\n      id: 'sequential',\n      label: 'No sequential patterns',\n      test: (pwd) => !hasSequentialPatterns(pwd),\n      met: false\n    },\n    {\n      id: 'repeated',\n      label: 'No more than 2 consecutive identical characters',\n      test: (pwd) => !hasRepeatedCharacters(pwd),\n      met: false\n    }\n  ];\n\n  // Test each requirement\n  requirements.forEach(req => {\n    req.met = req.test(password);\n  });\n\n  // Calculate strength score (0-5)\n  const metRequirements = requirements.filter(req => req.met).length;\n  const totalRequirements = requirements.length;\n  const score = Math.floor((metRequirements / totalRequirements) * 5);\n\n  // Determine strength label and color\n  let label: string;\n  let color: string;\n\n  if (score === 0) {\n    label = 'Very Weak';\n    color = 'text-red-500';\n  } else if (score === 1) {\n    label = 'Weak';\n    color = 'text-orange-500';\n  } else if (score === 2) {\n    label = 'Fair';\n    color = 'text-yellow-500';\n  } else if (score === 3) {\n    label = 'Good';\n    color = 'text-blue-500';\n  } else if (score === 4) {\n    label = 'Strong';\n    color = 'text-green-500';\n  } else {\n    label = 'Very Strong';\n    color = 'text-emerald-500';\n  }\n\n  return {\n    score,\n    label,\n    color,\n    requirements\n  };\n}\n\n/**\n * Check if password meets all requirements\n */\nexport function isPasswordValid(password: string): boolean {\n  const strength = validatePassword(password);\n  return strength.requirements.every(req => req.met);\n}\n","import type { \n    CreateCheckoutSessionRequest, \n    CreatePortalSessionRequest, \n    SubscriptionStatus,\n    LoginData,\n    SignupData,\n    AuthResponse,\n    User\n} from \"./types\";\nimport { getApiUrl } from \"./utils\";\n\n// Helper function to get auth token\nconst getAuthToken = () => {\n    return localStorage.getItem('auth_token');\n};\n\n// Helper function to get CSRF token (simplified version)\nconst getCSRFToken = async (): Promise<string> => {\n    // For now, return a simple token - this could be enhanced later\n    return `csrf-${Date.now()}`;\n};\n\n// Helper function to make authenticated requests\nconst makeAuthenticatedRequest = async <T>(\n    url: string, \n    options: RequestInit\n): Promise<T> => {\n    const csrfToken = await getCSRFToken();\n    \n    // Add CSRF token to request body if it's a POST/PUT/PATCH request\n    if (options.body && typeof options.body === 'string') {\n        const bodyData = JSON.parse(options.body);\n        bodyData.csrfToken = csrfToken;\n        options.body = JSON.stringify(bodyData);\n    }\n\n    const response = await fetch(url, options);\n    \n    if (!response.ok) {\n        throw new Error(`Request failed: ${response.status} ${response.statusText}`);\n    }\n    \n    return await response.json();\n};\n\nconst api = {\n    // Auth API calls\n    async login(loginData: LoginData, staySignedIn: boolean = true): Promise<User> {\n        const data: AuthResponse = await makeAuthenticatedRequest<AuthResponse>(\n            `${getApiUrl()}/auth/login`,\n            {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(loginData),\n            }\n        );\n\n        if (data.success && data.session && data.user) {\n            // Store session data\n            localStorage.setItem('auth_token', data.session.token);\n            localStorage.setItem('auth_user', JSON.stringify(data.user));\n            localStorage.setItem('auth_session', JSON.stringify(data.session));\n            localStorage.setItem('auth_stay_signed_in', staySignedIn.toString());\n            \n            return data.user;\n        }\n\n        throw new Error(data.error || 'Login failed');\n    },\n\n    async signup(signupData: SignupData): Promise<User> {\n        const data: AuthResponse = await makeAuthenticatedRequest<AuthResponse>(\n            `${getApiUrl()}/auth/signup`,\n            {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(signupData),\n            }\n        );\n\n        if (data.success && data.session && data.user) {\n            // Store session data\n            localStorage.setItem('auth_token', data.session.token);\n            localStorage.setItem('auth_user', JSON.stringify(data.user));\n            localStorage.setItem('auth_session', JSON.stringify(data.session));\n            \n            return data.user;\n        }\n\n        throw new Error(data.error || 'Signup failed');\n    },\n\n    async logout(): Promise<void> {\n        const token = getAuthToken();\n        if (token) {\n            try {\n                await fetch(`${getApiUrl()}/auth/logout`, {\n                    method: 'POST',\n                    headers: {\n                        'Authorization': `Bearer ${token}`,\n                        'Content-Type': 'application/json',\n                    },\n                });\n            } catch (error) {\n                console.warn('Logout request failed:', error);\n            }\n        }\n\n        // Clear local storage\n        localStorage.removeItem('auth_token');\n        localStorage.removeItem('auth_user');\n        localStorage.removeItem('auth_session');\n        localStorage.removeItem('auth_stay_signed_in');\n    },\n\n    async requestPasswordReset(email: string): Promise<AuthResponse> {\n        const data: AuthResponse = await makeAuthenticatedRequest<AuthResponse>(\n            `${getApiUrl()}/auth/password-reset`,\n            {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ email }),\n            }\n        );\n\n        if (!data.success) {\n            throw new Error(data.error || 'Failed to request password reset');\n        }\n        return data;\n    },\n\n    async changePassword(token: string, newPassword: string): Promise<AuthResponse> {\n        const data: AuthResponse = await makeAuthenticatedRequest<AuthResponse>(\n            `${getApiUrl()}/auth/change-password`,\n            {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ token, newPassword }),\n            }\n        );\n\n        if (!data.success) {\n            throw new Error(data.error || 'Failed to change password');\n        }\n        return data;\n    },\n\n    async verifyEmail(token: string): Promise<AuthResponse> {\n        const data: AuthResponse = await makeAuthenticatedRequest<AuthResponse>(\n            `${getApiUrl()}/auth/verify-email`,\n            {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ token }),\n            }\n        );\n\n        if (!data.success) {\n            throw new Error(data.error || 'Failed to verify email');\n        }\n        return data;\n    },\n\n    async validateSession(): Promise<boolean> {\n        const token = getAuthToken();\n        if (!token) {\n            return false;\n        }\n\n        try {\n            const response = await fetch(`${getApiUrl()}/auth/session`, {\n                method: 'GET',\n                headers: {\n                    'Authorization': `Bearer ${token}`,\n                    'Content-Type': 'application/json',\n                },\n            });\n\n            if (!response.ok) {\n                return false;\n            }\n\n            const data: AuthResponse = await response.json();\n            return data.success;\n        } catch (error) {\n            console.error('Session validation failed:', error);\n            return false;\n        }\n    },\n\n    async refreshSession(): Promise<boolean> {\n        const token = getAuthToken();\n        if (!token) {\n            return false;\n        }\n\n        try {\n            const response = await fetch(`${getApiUrl()}/auth/refresh`, {\n                method: 'POST',\n                headers: {\n                    'Authorization': `Bearer ${token}`,\n                    'Content-Type': 'application/json',\n                },\n            });\n\n            if (!response.ok) {\n                return false;\n            }\n\n            const data: AuthResponse = await response.json();\n            if (data.success && data.session) {\n                // Update stored session\n                localStorage.setItem('auth_token', data.session.token);\n                localStorage.setItem('auth_session', JSON.stringify(data.session));\n                return true;\n            }\n\n            return false;\n        } catch (error) {\n            console.error('Session refresh failed:', error);\n            return false;\n        }\n    },\n\n    // Stripe API calls\n    async createCheckoutSession(\n        request: CreateCheckoutSessionRequest\n    ): Promise<{ url: string }> {\n        const token = getAuthToken();\n        if (!token) {\n            throw new Error(\"User not authenticated\");\n        }\n\n        const res = await fetch(`${getApiUrl()}/create-checkout-session`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Bearer ${token}`,\n            },\n            body: JSON.stringify(request),\n        });\n\n        if (!res.ok) {\n            throw new Error(\"Failed to create checkout session\");\n        }\n\n        return res.json();\n    },\n\n    async createPortalSession(\n        request: CreatePortalSessionRequest\n    ): Promise<{ url: string }> {\n        const token = getAuthToken();\n        if (!token) {\n            throw new Error(\"User not authenticated\");\n        }\n\n        const res = await fetch(`${getApiUrl()}/create-portal-session`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Bearer ${token}`,\n            },\n            body: JSON.stringify(request),\n        });\n\n        if (!res.ok) {\n            throw new Error(\"Failed to create portal session\");\n        }\n\n        return res.json();\n    },\n\n    async getSubscriptionStatus(): Promise<SubscriptionStatus> {\n        const token = getAuthToken();\n        if (!token) {\n            throw new Error(\"User not authenticated\");\n        }\n\n        const res = await fetch(`${getApiUrl()}/subscription`, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Bearer ${token}`,\n            },\n        });\n\n        if (!res.ok) {\n            throw new Error(\"Failed to get subscription status\");\n        }\n\n        return res.json();\n    },\n};\n\nexport default api;\n","/**\n * Authentication utilities for connecting React components to the auth service\n */\n\nimport { isPasswordValid } from './utils';\nimport api from './api';\nimport type { User, Session, AuthResponse, LoginData, SignupData } from './types';\n\n// Session management configuration\ninterface SessionConfig {\n  refreshThreshold: number; // Minutes before expiration to refresh token\n  checkInterval: number; // How often to check session status (minutes)\n  maxRefreshAttempts: number; // Maximum refresh attempts before logout\n}\n\nclass AuthClient {\n  private isDevelopment: boolean;\n  private sessionCheckInterval: NodeJS.Timeout | null = null;\n  private refreshAttempts: number = 0;\n  private isRefreshing: boolean = false;\n  private refreshPromise: Promise<boolean> | null = null;\n  \n  // Session management configuration\n  private sessionConfig: SessionConfig = {\n    refreshThreshold: 5, // Refresh 5 minutes before expiration\n    checkInterval: 1, // Check every minute\n    maxRefreshAttempts: 3\n  };\n\n  constructor() {\n    this.isDevelopment = import.meta.env.DEV;\n    \n    // Initialize session management asynchronously\n    if (typeof window !== 'undefined') {\n      // Use setTimeout to ensure this runs after the constructor completes\n      setTimeout(() => {\n        this.initializeSessionManagement().catch(error => {\n          console.error('Failed to initialize session management:', error);\n        });\n      }, 0);\n    }\n  }\n\n  /**\n   * Initialize session management and start monitoring\n   */\n  private async initializeSessionManagement(): Promise<void> {\n    if (typeof window === 'undefined') return;\n\n    // Validate session with server before starting monitoring\n    if (this.isAuthenticated()) {\n      try {\n        const isValid = await this.validateSession();\n        if (!isValid) {\n          // Session is invalid, clear it and don't start monitoring\n          console.log('Session validation failed on initialization, clearing session');\n          this.logout();\n          return;\n        }\n        console.log('Session validated successfully on initialization');\n      } catch (error) {\n        console.error('Session validation error on initialization:', error);\n        // On error, clear the session to be safe\n        this.logout();\n        return;\n      }\n      \n      // Only start monitoring if session is valid\n      this.startSessionMonitoring();\n    }\n\n    // Listen for storage changes (other tabs logging in/out)\n    window.addEventListener('storage', this.handleStorageChange.bind(this));\n    \n    // Listen for page visibility changes to refresh session when tab becomes active\n    document.addEventListener('visibilitychange', this.handleVisibilityChange.bind(this));\n  }\n\n  /**\n   * Handle storage changes from other tabs\n   */\n  private handleStorageChange(event: StorageEvent): void {\n    console.log('🔧 Storage event detected:', {\n      key: event.key,\n      oldValue: event.oldValue ? 'present' : 'null',\n      newValue: event.newValue ? 'present' : 'null',\n      url: event.url,\n      timestamp: new Date().toISOString()\n    });\n    \n    if (event.key === 'auth_token') {\n      if (event.newValue) {\n        // Token was added/updated in another tab\n        console.log('🔧 Token added/updated in another tab');\n        this.startSessionMonitoring();\n      } else {\n        // Token was removed in another tab\n        console.log('🔧 Token removed in another tab - stopping monitoring');\n        this.stopSessionMonitoring();\n      }\n    }\n  }\n\n  /**\n   * Handle page visibility changes\n   */\n  private handleVisibilityChange(): void {\n    if (!document.hidden && this.isAuthenticated()) {\n      // Page became visible, check if session needs refresh\n      this.checkAndRefreshSession();\n    }\n  }\n\n  /**\n   * Start monitoring session status\n   */\n  private startSessionMonitoring(): void {\n    console.log('🔧 Starting session monitoring:', {\n      timestamp: new Date().toISOString(),\n      hadExistingInterval: !!this.sessionCheckInterval\n    });\n    \n    if (this.sessionCheckInterval) {\n      clearInterval(this.sessionCheckInterval);\n    }\n\n    this.sessionCheckInterval = setInterval(() => {\n      this.checkAndRefreshSession();\n    }, this.sessionConfig.checkInterval * 60 * 1000);\n\n    // Add a delay before the first check to give the auth service time to process\n    // This prevents immediate validation right after login\n    setTimeout(() => {\n      console.log('🔧 Delayed first session check (after 2 second delay)');\n      this.checkAndRefreshSession();\n    }, 2000); // 2 second delay\n  }\n\n  /**\n   * Stop monitoring session status\n   */\n  private stopSessionMonitoring(): void {\n    console.log('🔧 Stopping session monitoring:', {\n      timestamp: new Date().toISOString(),\n      hadInterval: !!this.sessionCheckInterval\n    });\n    \n    if (this.sessionCheckInterval) {\n      clearInterval(this.sessionCheckInterval);\n      this.sessionCheckInterval = null;\n    }\n  }\n\n  /**\n   * Check if session needs refresh and handle accordingly\n   */\n  private async checkAndRefreshSession(): Promise<void> {\n    console.log('🔧 Session check started:', {\n      timestamp: new Date().toISOString(),\n      isAuthenticated: this.isAuthenticated()\n    });\n    \n    if (!this.isAuthenticated()) {\n      console.log('🔧 Session check: User not authenticated, stopping monitoring');\n      this.stopSessionMonitoring();\n      return;\n    }\n\n    const session = this.getCurrentSession();\n    if (!session) {\n      console.log('🔧 Session check: No session found, logging out');\n      this.logout();\n      return;\n    }\n\n    const expiresAt = new Date(session.expiresAt).getTime();\n    const now = Date.now();\n    const timeUntilExpiry = expiresAt - now;\n    const refreshThresholdMs = this.sessionConfig.refreshThreshold * 60 * 1000;\n\n    console.log('🔧 Session check details:', {\n      sessionId: session.id,\n      expiresAt: session.expiresAt,\n      currentTime: new Date().toISOString(),\n      timeUntilExpiry: Math.round(timeUntilExpiry / 1000 / 60), // minutes\n      refreshThreshold: this.sessionConfig.refreshThreshold, // minutes\n      shouldRefresh: timeUntilExpiry <= refreshThresholdMs,\n      isExpired: timeUntilExpiry <= 0\n    });\n\n    if (timeUntilExpiry <= 0) {\n      // Session has expired\n      console.log('🔧 Session check: Session has expired, logging out');\n      this.logout();\n      this.emitSessionExpired();\n    } else if (timeUntilExpiry <= refreshThresholdMs) {\n      // Session is about to expire, refresh it\n      console.log(`🔧 Session check: Session expiring in ${Math.round(timeUntilExpiry / 1000 / 60)} minutes, refreshing token`);\n      const refreshSuccess = await this.refreshSession();\n      if (!refreshSuccess) {\n        console.log('🔧 Session check: Session refresh failed, logging out');\n        this.logout();\n        this.emitSessionExpired();\n      }\n    } else {\n      // Session is still valid, but let's validate it with the server periodically\n      // Only validate every 5 minutes to avoid too many requests\n      const lastValidation = localStorage.getItem('auth_last_validation');\n      const now = Date.now();\n      const validationInterval = 5 * 60 * 1000; // 5 minutes\n      \n      if (!lastValidation || (now - parseInt(lastValidation)) > validationInterval) {\n        console.log('🔧 Session check: Performing periodic session validation');\n        const isValid = await this.validateSession();\n        if (isValid) {\n          localStorage.setItem('auth_last_validation', now.toString());\n          console.log('🔧 Session check: Periodic validation successful');\n        } else {\n          console.log('🔧 Session check: Periodic validation failed');\n          this.logout();\n          this.emitSessionExpired();\n        }\n      } else {\n        console.log('🔧 Session check: Session still valid, skipping validation');\n      }\n    }\n  }\n\n  /**\n   * Refresh the current session\n   */\n  private async refreshSession(): Promise<boolean> {\n    if (this.isRefreshing && this.refreshPromise) {\n      console.log('🔧 Session refresh already in progress, waiting...');\n      return await this.refreshPromise;\n    }\n\n    if (this.refreshAttempts >= this.sessionConfig.maxRefreshAttempts) {\n      console.log('🔧 Max refresh attempts reached, giving up');\n      return false;\n    }\n\n    this.isRefreshing = true;\n    this.refreshAttempts++;\n    \n    this.refreshPromise = this.performRefresh();\n    \n    try {\n      const result = await this.refreshPromise;\n      return result;\n    } finally {\n      this.isRefreshing = false;\n      this.refreshPromise = null;\n    }\n  }\n\n  /**\n   * Perform the actual session refresh\n   */\n  private async performRefresh(): Promise<boolean> {\n    console.log('🔧 Performing session refresh, attempt:', this.refreshAttempts);\n    \n    try {\n      const success = await api.refreshSession();\n      \n      if (success) {\n        console.log('🔧 Session refresh successful');\n        this.refreshAttempts = 0; // Reset attempts on success\n        return true;\n      } else {\n        console.log('🔧 Session refresh failed');\n        return false;\n      }\n    } catch (error) {\n      console.error('🔧 Session refresh error:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get current session from localStorage\n   */\n  getCurrentSession(): Session | null {\n    if (typeof window === 'undefined') return null;\n    \n    const sessionStr = localStorage.getItem('auth_session');\n    if (!sessionStr) return null;\n    \n    try {\n      return JSON.parse(sessionStr) as Session;\n    } catch {\n      return null;\n    }\n  }\n\n  /**\n   * Emit session expired event\n   */\n  private emitSessionExpired(): void {\n    // Dispatch custom event for other parts of the app to listen to\n    if (typeof window !== 'undefined') {\n      window.dispatchEvent(new CustomEvent('auth:session-expired'));\n    }\n  }\n\n  /**\n   * Check if we should use mock mode\n   */\n  private shouldUseMock(): boolean {\n    // In development, use mock mode if we're on localhost\n    return this.isDevelopment && (\n      window.location.hostname.includes('localhost') ||\n      window.location.hostname.includes('127.0.0.1')\n    );\n  }\n\n  /**\n   * Generate mock user data\n   */\n  private generateMockUser(data: { email: string; firstName?: string; lastName?: string }): User {\n    return {\n      id: `mock-${Date.now()}`,\n      email: data.email,\n      firstName: data.firstName || 'Mock',\n      lastName: data.lastName || 'User',\n      createdAt: new Date().toISOString(),\n    };\n  }\n\n  /**\n   * Generate mock session data\n   */\n  private generateMockSession(): Session {\n    return {\n      id: `session-${Date.now()}`,\n      token: `mock-token-${Date.now()}`,\n      expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), // 24 hours\n      refreshToken: `mock-refresh-${Date.now()}`,\n    };\n  }\n\n  /**\n   * Login user\n   */\n  async login(loginData: LoginData, staySignedIn: boolean = true): Promise<User> {\n    console.log('🔧 Auth login called with:', { \n      isDevelopment: this.isDevelopment, \n      shouldUseMock: this.shouldUseMock(),\n      staySignedIn\n    });\n\n    if (this.shouldUseMock()) {\n      console.log('🔧 Using mock login');\n      // Simulate network delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // Mock validation\n      if (!loginData.email || !loginData.password) {\n        throw new Error('Email and password are required');\n      }\n\n      const user = this.generateMockUser({ email: loginData.email });\n      const session = this.generateMockSession();\n      \n      // Store in localStorage\n      localStorage.setItem('auth_token', session.token);\n      localStorage.setItem('auth_user', JSON.stringify(user));\n      localStorage.setItem('auth_session', JSON.stringify(session));\n      localStorage.setItem('auth_stay_signed_in', staySignedIn.toString());\n      \n      // Start session monitoring\n      this.startSessionMonitoring();\n      \n      console.log('🔧 Mock login successful:', user);\n      return user;\n    }\n\n    console.log('🔧 Using real auth service login');\n    \n    try {\n      const user = await api.login(loginData, staySignedIn);\n      \n      // Start session monitoring\n      this.startSessionMonitoring();\n      \n      console.log('🔧 Login successful:', user);\n      return user;\n    } catch (error) {\n      console.error('Login failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Register new user\n   */\n  async signup(signupData: SignupData): Promise<User> {\n    console.log('🔧 Auth signup called with:', { \n      isDevelopment: this.isDevelopment, \n      shouldUseMock: this.shouldUseMock() \n    });\n\n    if (this.shouldUseMock()) {\n      console.log('🔧 Using mock signup');\n      // Simulate network delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // Mock validation\n      if (!signupData.email || !signupData.password || !signupData.firstName || !signupData.lastName) {\n        throw new Error('All fields are required');\n      }\n      \n      if (!isPasswordValid(signupData.password)) {\n        throw new Error('Password does not meet all requirements');\n      }\n\n      const user = this.generateMockUser(signupData);\n      const session = this.generateMockSession();\n      \n      // Store in localStorage\n      localStorage.setItem('auth_token', session.token);\n      localStorage.setItem('auth_user', JSON.stringify(user));\n      localStorage.setItem('auth_session', JSON.stringify(session));\n      \n      // Start session monitoring\n      this.startSessionMonitoring();\n      \n      console.log('🔧 Mock registration successful:', user);\n      return user;\n    }\n\n    console.log('🔧 Using real auth service signup');\n    \n    try {\n      const user = await api.signup(signupData);\n      \n      // Start session monitoring\n      this.startSessionMonitoring();\n      \n      console.log('🔧 Signup successful:', user);\n      return user;\n    } catch (error) {\n      console.error('Signup failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Logout user\n   */\n  async logout(): Promise<void> {\n    if (typeof window === 'undefined') return;\n\n    const token = localStorage.getItem('auth_token');\n    console.log('🔧 Logout called:', {\n      hadToken: !!token,\n      tokenLength: token?.length,\n      timestamp: new Date().toISOString(),\n      stack: new Error().stack?.split('\\n').slice(1, 4).join(' | ') // Show call stack\n    });\n    \n    if (this.shouldUseMock()) {\n      console.log('🔧 Mock logout successful');\n    } else {\n      await api.logout();\n    }\n\n    // Stop session monitoring\n    this.stopSessionMonitoring();\n  }\n\n  /**\n   * Validate current session with server\n   */\n  async validateSession(): Promise<boolean> {\n    if (this.shouldUseMock()) {\n      return this.isAuthenticated();\n    }\n\n    return await api.validateSession();\n  }\n\n  /**\n   * Request a password reset link\n   */\n  async requestPasswordReset(email: string): Promise<AuthResponse> {\n    console.log('🔧 Auth requestPasswordReset called with:', {\n      isDevelopment: this.isDevelopment,\n      shouldUseMock: this.shouldUseMock(),\n      email\n    });\n\n    if (this.shouldUseMock()) {\n      console.log('🔧 Using mock requestPasswordReset');\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      if (!email) {\n        throw new Error('Email is required');\n      }\n      return { success: true, message: 'Password reset link sent (mock)' };\n    }\n\n    return await api.requestPasswordReset(email);\n  }\n\n  /**\n   * Change user's password using a reset token\n   */\n  async changePassword(token: string, newPassword: string): Promise<AuthResponse> {\n    console.log('🔧 Auth changePassword called with:', {\n      isDevelopment: this.isDevelopment,\n      shouldUseMock: this.shouldUseMock(),\n      token: token ? 'present' : 'missing',\n      newPassword: newPassword ? 'present' : 'missing'\n    });\n\n    if (this.shouldUseMock()) {\n      console.log('🔧 Using mock changePassword');\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      if (!token || !newPassword) {\n        throw new Error('Token and new password are required');\n      }\n      return { success: true, message: 'Password changed successfully (mock)' };\n    }\n\n    return await api.changePassword(token, newPassword);\n  }\n\n  /**\n   * Verify email with token\n   */\n  async verifyEmail(token: string): Promise<AuthResponse> {\n    console.log('🔧 Auth verifyEmail called with:', {\n      isDevelopment: this.isDevelopment,\n      shouldUseMock: this.shouldUseMock(),\n      token: token ? 'present' : 'missing'\n    });\n\n    if (this.shouldUseMock()) {\n      console.log('🔧 Using mock verifyEmail');\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      if (!token) {\n        throw new Error('Token is required');\n      }\n      return { success: true, message: 'Email verified successfully (mock)' };\n    }\n\n    return await api.verifyEmail(token);\n  }\n\n  /**\n   * Check if user is authenticated\n   */\n  isAuthenticated(): boolean {\n    if (typeof window === 'undefined') return false;\n    const token = localStorage.getItem('auth_token');\n    console.log('🔧 isAuthenticated check:', {\n      hasToken: !!token,\n      tokenLength: token?.length,\n      timestamp: new Date().toISOString(),\n      stack: new Error().stack?.split('\\n').slice(1, 4).join(' | ') // Show call stack\n    });\n    return !!token;\n  }\n\n  /**\n   * Get current user from localStorage\n   */\n  getCurrentUser(): User | null {\n    if (typeof window === 'undefined') return null;\n    \n    const userStr = localStorage.getItem('auth_user');\n    if (!userStr) return null;\n    \n    try {\n      return JSON.parse(userStr) as User;\n    } catch {\n      return null;\n    }\n  }\n\n  /**\n   * Get session expiration time\n   */\n  getSessionExpiration(): Date | null {\n    const session = this.getCurrentSession();\n    return session ? new Date(session.expiresAt) : null;\n  }\n\n  /**\n   * Check if session is about to expire\n   */\n  isSessionExpiringSoon(): boolean {\n    const session = this.getCurrentSession();\n    if (!session) return false;\n\n    const expiresAt = new Date(session.expiresAt).getTime();\n    const now = Date.now();\n    const refreshThresholdMs = this.sessionConfig.refreshThreshold * 60 * 1000;\n\n    return (expiresAt - now) <= refreshThresholdMs;\n  }\n\n  /**\n   * Check if user opted to stay signed in\n   */\n  isStaySignedInEnabled(): boolean {\n    if (typeof window === 'undefined') return false;\n    return localStorage.getItem('auth_stay_signed_in') === 'true';\n  }\n\n  /**\n   * Get time until session expires\n   */\n  getTimeUntilExpiration(): number {\n    const session = this.getCurrentSession();\n    if (!session) return 0;\n\n    const expiresAt = new Date(session.expiresAt).getTime();\n    const now = Date.now();\n    return Math.max(0, expiresAt - now);\n  }\n\n  /**\n   * Get formatted time until expiration\n   */\n  getFormattedTimeUntilExpiration(): string {\n    const timeMs = this.getTimeUntilExpiration();\n    if (timeMs === 0) return 'Expired';\n\n    const hours = Math.floor(timeMs / (1000 * 60 * 60));\n    const minutes = Math.floor((timeMs % (1000 * 60 * 60)) / (1000 * 60));\n\n    if (hours > 0) {\n      return `${hours}h ${minutes}m`;\n    } else if (minutes > 0) {\n      return `${minutes}m`;\n    } else {\n      return 'Less than 1m';\n    }\n  }\n\n  /**\n   * Update session configuration\n   */\n  updateSessionConfig(config: Partial<SessionConfig>): void {\n    this.sessionConfig = { ...this.sessionConfig, ...config };\n    \n    // Restart monitoring with new config if currently monitoring\n    if (this.sessionCheckInterval) {\n      this.startSessionMonitoring();\n    }\n  }\n\n  /**\n   * Get current session configuration\n   */\n  getSessionConfig(): SessionConfig {\n    return { ...this.sessionConfig };\n  }\n\n  /**\n   * Check if we're using mock mode\n   */\n  isMockMode(): boolean {\n    return this.shouldUseMock();\n  }\n\n  /**\n   * Cleanup method to be called when the app unmounts\n   */\n  cleanup(): void {\n    this.stopSessionMonitoring();\n    \n    if (typeof window !== 'undefined') {\n      window.removeEventListener('storage', this.handleStorageChange.bind(this));\n      document.removeEventListener('visibilitychange', this.handleVisibilityChange.bind(this));\n    }\n  }\n}\n\n// Create and export the auth instance\nexport const auth = new AuthClient();\n\n// Re-export types for convenience\nexport type { User, Session, AuthResponse, LoginData, SignupData }; "],"names":["now"],"mappings":"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"}