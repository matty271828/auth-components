{"version":3,"file":"index.cjs","sources":["../src/components/ChangePasswordForm.tsx","../src/components/EmailVerificationForm.tsx","../src/components/ui/badge.tsx","../src/components/AccountSettings.tsx"],"sourcesContent":["\"use client\"\n\nimport type React from \"react\"\nimport { useState, useMemo } from \"react\"\nimport { validatePassword, isPasswordValid } from \"@/lib/utils\"\nimport { PasswordStrengthIndicator } from \"./ui/password-strength-indicator\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Loader2, Eye, EyeOff } from \"lucide-react\"\nimport { auth } from \"@/lib/auth\"\n\ninterface ChangePasswordFormProps {\n  onSuccess?: () => void\n  onError?: (error: string) => void\n  onSwitchToLogin?: () => void\n  token?: string // Assuming a token will be passed for password reset\n}\n\nexport default function ChangePasswordForm({ onSuccess, onError, onSwitchToLogin, token }: ChangePasswordFormProps) {\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState(\"\")\n  const [newPassword, setNewPassword] = useState(\"\")\n  const [confirmPassword, setConfirmPassword] = useState(\"\")\n  const [success, setSuccess] = useState(false)\n  const [showNewPassword, setShowNewPassword] = useState(false)\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false)\n\n  // Calculate password strength whenever newPassword changes\n  const passwordStrength = useMemo(() => {\n    return validatePassword(newPassword)\n  }, [newPassword])\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    \n    if (!newPassword || !confirmPassword) {\n      setError(\"Please fill in all fields\")\n      return\n    }\n\n    if (newPassword !== confirmPassword) {\n      setError(\"Passwords do not match\")\n      return\n    }\n\n    if (!isPasswordValid(newPassword)) {\n      setError(\"Password does not meet all requirements\")\n      return\n    }\n\n    if (!token) {\n      setError(\"Reset token is required\")\n      return\n    }\n\n    setIsLoading(true)\n    setError(\"\")\n    setSuccess(false)\n\n    try {\n      const response = await auth.changePassword(token, newPassword)\n      console.log(\"Password change response:\", response)\n      \n      setSuccess(true)\n      onSuccess?.()\n\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : \"Failed to change password\"\n      setError(errorMessage)\n      onError?.(errorMessage)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  if (success) {\n    return (\n      <Card className=\"w-full max-w-sm sm:max-w-md mx-auto border-none shadow-none\">\n        <CardHeader className=\"space-y-1 px-2 sm:px-6 pt-3 sm:pt-6\">\n          <CardTitle className=\"text-base sm:text-xl lg:text-2xl font-bold text-center\">Password Changed</CardTitle>\n          <CardDescription className=\"text-center text-xs sm:text-sm lg:text-base\">\n            Your password has been successfully updated.\n          </CardDescription>\n        </CardHeader>\n        <CardFooter className=\"flex flex-col space-y-2 sm:space-y-4 px-2 sm:px-6 pb-3 sm:pb-6\">\n          <Button onClick={onSwitchToLogin} className=\"w-full h-9 sm:h-11 text-sm sm:text-base\">\n            Back to Login\n          </Button>\n        </CardFooter>\n      </Card>\n    )\n  }\n\n  return (\n    <Card className=\"w-full max-w-sm sm:max-w-md mx-auto border-none shadow-none\">\n      <CardHeader className=\"space-y-1 px-2 sm:px-6 pt-3 sm:pt-6\">\n        <CardTitle className=\"text-base sm:text-xl lg:text-2xl font-bold text-center\">Set New Password</CardTitle>\n        <CardDescription className=\"text-center text-xs sm:text-sm lg:text-base\">\n          Enter your new password below\n        </CardDescription>\n      </CardHeader>\n      <form onSubmit={handleSubmit}>\n        <CardContent className=\"space-y-2 sm:space-y-4 px-2 sm:px-6\">\n          {error && (\n            <div className=\"p-2 text-xs sm:text-sm text-red-600 bg-red-50 border border-red-200 rounded-md\">\n              {error}\n            </div>\n          )}\n          \n          <div className=\"space-y-1\">\n            <Label htmlFor=\"newPassword\" className=\"text-xs sm:text-sm lg:text-base\">New Password</Label>\n            <div className=\"relative\">\n              <Input \n                id=\"newPassword\" \n                name=\"newPassword\" \n                type={showNewPassword ? \"text\" : \"password\"} \n                placeholder=\"Enter new password\" \n                value={newPassword}\n                onChange={(e) => setNewPassword(e.target.value)}\n                required \n                disabled={isLoading}\n                className=\"h-9 sm:h-11 text-base sm:text-base pr-10 sm:pr-12\"\n              />\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"absolute right-0 top-0 h-full px-2 py-1 sm:px-3 sm:py-2 hover:bg-transparent min-h-0\"\n                onClick={() => setShowNewPassword(!showNewPassword)}\n                disabled={isLoading}\n              >\n                {showNewPassword ? <EyeOff className=\"h-3 w-3 sm:h-4 sm:w-4\" /> : <Eye className=\"h-3 w-3 sm:h-4 sm:w-4\" />}\n                <span className=\"sr-only\">{showNewPassword ? \"Hide password\" : \"Show password\"}</span>\n              </Button>\n            </div>\n            {/* Ultra-compact password strength indicator on mobile */}\n            {newPassword && (\n              <div className=\"mt-1 sm:mt-3 p-1.5 sm:p-3 bg-gray-50 rounded-md border\">\n                <PasswordStrengthIndicator strength={passwordStrength} compact={true} />\n              </div>\n            )}\n          </div>\n\n          <div className=\"space-y-1 mb-4\">\n            <Label htmlFor=\"confirmPassword\" className=\"text-xs sm:text-sm lg:text-base\">Confirm New Password</Label>\n            <div className=\"relative\">\n              <Input \n                id=\"confirmPassword\" \n                name=\"confirmPassword\" \n                type={showConfirmPassword ? \"text\" : \"password\"} \n                placeholder=\"Confirm new password\" \n                value={confirmPassword}\n                onChange={(e) => setConfirmPassword(e.target.value)}\n                required \n                disabled={isLoading}\n                className=\"h-9 sm:h-11 text-base sm:text-base pr-10 sm:pr-12\"\n              />\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"absolute right-0 top-0 h-full px-2 py-1 sm:px-3 sm:py-2 hover:bg-transparent min-h-0\"\n                onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                disabled={isLoading}\n              >\n                {showConfirmPassword ? <EyeOff className=\"h-3 w-3 sm:h-4 sm:w-4\" /> : <Eye className=\"h-3 w-3 sm:h-4 sm:w-4\" />}\n                <span className=\"sr-only\">{showConfirmPassword ? \"Hide password\" : \"Show password\"}</span>\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n\n        <CardFooter className=\"flex flex-col space-y-2 sm:space-y-4 px-2 sm:px-6 pb-3 sm:pb-6\">\n          <Button type=\"submit\" className=\"w-full h-9 sm:h-11 text-sm sm:text-base\" disabled={isLoading || !isPasswordValid(newPassword)}>\n            {isLoading ? (\n              <>\n                <Loader2 className=\"mr-2 h-3 w-3 sm:h-4 sm:w-4 animate-spin\" />\n                Changing Password...\n              </>\n            ) : (\n              \"Change Password\"\n            )}\n          </Button>\n          <p className=\"text-xs sm:text-sm text-center text-muted-foreground\">\n            Remember your password?{\" \"}\n            <button \n              type=\"button\"\n              onClick={onSwitchToLogin}\n              className=\"text-primary hover:underline font-medium\"\n            >\n              Back to Login\n            </button>\n          </p>\n        </CardFooter>\n      </form>\n    </Card>\n  )\n}\n","\"use client\"\n\nimport type React from \"react\"\nimport { useState } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Loader2, MailCheck } from \"lucide-react\"\nimport { auth } from \"@/lib/auth\"\n\ninterface EmailVerificationFormProps {\n  onSuccess?: () => void\n  onError?: (error: string) => void\n  onSwitchToLogin?: () => void\n  token?: string // Assuming a token will be passed for email verification\n}\n\nexport default function EmailVerificationForm({ onSuccess, onError, onSwitchToLogin, token }: EmailVerificationFormProps) {\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState(\"\")\n  const [success, setSuccess] = useState(false)\n\n  const handleVerify = async (e: React.FormEvent) => {\n    e.preventDefault()\n    \n    if (!token) {\n      setError(\"Verification token is missing.\")\n      return\n    }\n\n    setIsLoading(true)\n    setError(\"\")\n    setSuccess(false)\n\n    try {\n      const response = await auth.verifyEmail(token)\n      console.log(\"Email verification response:\", response)\n      \n      setSuccess(true)\n      onSuccess?.()\n\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : \"Email verification failed\"\n      setError(errorMessage)\n      onError?.(errorMessage)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  if (success) {\n    return (\n      <Card className=\"w-full max-w-sm sm:max-w-md mx-auto border-none shadow-none\">\n        <CardHeader className=\"space-y-1 px-2 sm:px-6 pt-3 sm:pt-6\">\n          <CardTitle className=\"text-base sm:text-xl lg:text-2xl font-bold text-center\">Email Verified!</CardTitle>\n          <CardDescription className=\"text-center text-xs sm:text-sm lg:text-base\">\n            Your email address has been successfully verified.\n          </CardDescription>\n        </CardHeader>\n        <CardFooter className=\"flex flex-col space-y-2 sm:space-y-4 px-2 sm:px-6 pb-3 sm:pb-6\">\n          <Button onClick={onSwitchToLogin} className=\"w-full h-9 sm:h-11 text-sm sm:text-base\">\n            Back to Login\n          </Button>\n        </CardFooter>\n      </Card>\n    )\n  }\n\n  return (\n    <Card className=\"w-full max-w-sm sm:max-w-md mx-auto border-none shadow-none\">\n      <CardHeader className=\"space-y-1 px-2 sm:px-6 pt-3 sm:pt-6\">\n        \n        <CardTitle className=\"text-base sm:text-xl lg:text-2xl font-bold text-center\">Email Verification</CardTitle>\n        <div className=\"flex justify-center mb-4\">\n          <MailCheck className=\"h-12 w-12 text-green-500\" />\n        </div>\n        <CardDescription className=\"text-center text-xs sm:text-sm lg:text-base\">\n          Confirm your email address to continue.\n        </CardDescription>\n      </CardHeader>\n      <form onSubmit={handleVerify}>\n        <CardContent className=\"space-y-2 sm:space-y-4 px-2 sm:px-6\">\n          {error && (\n            <div className=\"p-2 text-xs sm:text-sm text-red-600 bg-red-50 border border-red-200 rounded-md\">\n              {error}\n            </div>\n          )}\n        </CardContent>\n\n        <CardFooter className=\"flex flex-col space-y-2 sm:space-y-4 px-2 sm:px-6 pb-3 sm:pb-6\">\n          <Button type=\"submit\" className=\"w-full h-9 sm:h-11 text-sm sm:text-base\" disabled={isLoading}>\n            {isLoading ? (\n              <>\n                <Loader2 className=\"mr-2 h-3 w-3 sm:h-4 sm:w-4 animate-spin\" />\n                Verifying...\n              </>\n            ) : (\n              \"Verify Email\"\n            )}\n          </Button>\n        </CardFooter>\n      </form>\n    </Card>\n  )\n}\n","import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants } ","\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Button } from \"./ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"./ui/card\"\nimport { Badge } from \"./ui/badge\"\nimport { \n  User, \n  Mail, \n  Calendar, \n  Crown,\n  Settings,\n  ArrowUpRight,\n  CheckCircle,\n  XCircle,\n  AlertCircle,\n  Loader2\n} from \"lucide-react\"\nimport api from \"../lib/api\"\nimport type { SubscriptionStatus } from \"../lib/types\"\n\ninterface PlanFeature {\n  name: string\n  description?: string\n}\n\ninterface UserDetails {\n  email: string\n  firstName: string\n  lastName: string\n  memberSince: string\n}\n\ninterface AccountSettingsProps {\n  user: UserDetails\n  premiumPlanFeatures?: PlanFeature[]\n  className?: string\n}\n\nexport default function AccountSettings({\n  user,\n  premiumPlanFeatures = [\n    { name: \"Unlimited projects\" },\n    { name: \"Advanced analytics\" },\n    { name: \"Priority support\" }\n  ],\n  className\n}: AccountSettingsProps) {\n  const [isLoading, setIsLoading] = useState(false)\n  const [subscription, setSubscription] = useState<SubscriptionStatus | null>(null)\n  const [error, setError] = useState<string | null>(null)\n  const [successMessage, setSuccessMessage] = useState<string | null>(null)\n\n  // Check for redirect status on component mount\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search)\n    const status = urlParams.get('status')\n    \n    if (status === 'success') {\n      setSuccessMessage(\"Payment completed successfully! Your subscription has been activated.\")\n      // Clear the URL parameter\n      window.history.replaceState({}, document.title, window.location.pathname)\n    } else if (status === 'cancelled') {\n      setError(\"Payment was cancelled. You can try again anytime.\")\n      // Clear the URL parameter\n      window.history.replaceState({}, document.title, window.location.pathname)\n    }\n  }, [])\n\n  // Fetch subscription status on component mount\n  useEffect(() => {\n    fetchSubscriptionStatus()\n  }, [])\n\n  const fetchSubscriptionStatus = async () => {\n    try {\n      const status = await api.getSubscriptionStatus()\n      setSubscription(status)\n      setError(null)\n    } catch (err) {\n      console.error(\"Failed to fetch subscription status:\", err)\n      setError(\"Failed to load subscription status\")\n      // Fallback to free plan if we can't fetch status\n      setSubscription({\n        currentPlan: \"free\",\n        status: \"active\"\n      })\n    }\n  }\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString(\"en-GB\", {\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\"\n    })\n  }\n\n  const formatPrice = (price: number, currency: string) => {\n    return new Intl.NumberFormat(\"en-GB\", {\n      style: \"currency\",\n      currency: currency,\n    }).format(price)\n  }\n\n  const getStatusConfig = () => {\n    if (!subscription) return null\n    \n    switch (subscription.status) {\n      case \"active\":\n        return {\n          icon: CheckCircle,\n          color: \"text-green-500\",\n          bgColor: \"bg-green-50\",\n          borderColor: \"border-green-200\",\n          text: \"Active\"\n        }\n      case \"cancelled\":\n        return {\n          icon: XCircle,\n          color: \"text-red-500\",\n          bgColor: \"bg-red-50\",\n          borderColor: \"border-red-200\",\n          text: \"Cancelled\"\n        }\n      case \"past_due\":\n        return {\n          icon: AlertCircle,\n          color: \"text-orange-500\",\n          bgColor: \"bg-orange-50\",\n          borderColor: \"border-orange-200\",\n          text: \"Past Due\"\n        }\n      case \"trialing\":\n        return {\n          icon: Crown,\n          color: \"text-blue-500\",\n          bgColor: \"bg-blue-50\",\n          borderColor: \"border-blue-200\",\n          text: \"Trial\"\n        }\n      default:\n        return {\n          icon: AlertCircle,\n          color: \"text-gray-500\",\n          bgColor: \"bg-gray-50\",\n          borderColor: \"border-gray-200\",\n          text: \"Unknown\"\n        }\n    }\n  }\n\n  const handleUpgrade = async () => {\n    setIsLoading(true)\n    setError(null)\n    setSuccessMessage(null)\n    \n    try {\n      // Create checkout session with proper redirect URLs\n      const response = await api.createCheckoutSession({\n        successUrl: `${window.location.origin}${window.location.pathname}?status=success`,\n        cancelUrl: `${window.location.origin}${window.location.pathname}?status=cancelled`,\n        planId: \"premium_monthly\" // You can make this configurable\n      })\n      \n      // Redirect to Stripe Checkout\n      window.location.href = response.url\n    } catch (err) {\n      console.error(\"Failed to create checkout session:\", err)\n      setError(\"Failed to start upgrade process. Please try again.\")\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleManageSubscription = async () => {\n    setIsLoading(true)\n    setError(null)\n    setSuccessMessage(null)\n    \n    try {\n      // Create portal session with return URL\n      const response = await api.createPortalSession({\n        returnUrl: `${window.location.origin}${window.location.pathname}`\n      })\n      \n      // Redirect to Stripe Customer Portal\n      window.location.href = response.url\n    } catch (err) {\n      console.error(\"Failed to create portal session:\", err)\n      setError(\"Failed to open subscription management. Please try again.\")\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  // Show loading state while fetching subscription\n  if (!subscription) {\n    return (\n      <div className={`w-full max-w-4xl mx-auto space-y-6 ${className || \"\"}`}>\n        <Card>\n          <CardContent className=\"flex items-center justify-center py-12\">\n            <Loader2 className=\"h-8 w-8 animate-spin\" />\n            <span className=\"ml-2\">Loading subscription details...</span>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }\n\n  const statusConfig = getStatusConfig()\n  const StatusIcon = statusConfig?.icon || AlertCircle\n\n  return (\n    <div className={`w-full max-w-md mx-auto space-y-6 ${className || \"\"}`}>\n      {/* Success Message */}\n      {successMessage && (\n        <Card className=\"border-green-200 bg-green-50\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center gap-2 text-green-800\">\n              <CheckCircle className=\"h-4 w-4\" />\n              <span className=\"text-sm\">{successMessage}</span>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Error Message */}\n      {error && (\n        <Card className=\"border-red-200 bg-red-50\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center gap-2 text-red-800\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <span className=\"text-sm\">{error}</span>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* User Details Card */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-xl flex items-center gap-2\">\n            <User className=\"h-5 w-5\" />\n            Account Details\n          </CardTitle>\n          <CardDescription>\n            Your account information and subscription status\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {/* User Info */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"flex items-center gap-3\">\n              <Mail className=\"h-4 w-4 text-muted-foreground\" />\n              <div>\n                <p className=\"text-sm font-medium\">Email</p>\n                <p className=\"text-sm text-muted-foreground\">{user.email}</p>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n              <div>\n                <p className=\"text-sm font-medium\">Member Since</p>\n                <p className=\"text-sm text-muted-foreground\">{formatDate(user.memberSince)}</p>\n              </div>\n            </div>\n          </div>\n\n          {/* Subscription Status Badge */}\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-sm font-medium\">Status:</span>\n            <Badge \n              variant={subscription.status === \"active\" ? \"default\" : \"secondary\"}\n              className={`${statusConfig?.bgColor} ${statusConfig?.borderColor} ${statusConfig?.color}`}\n            >\n              <StatusIcon className=\"h-3 w-3 mr-1\" />\n              {statusConfig?.text}\n            </Badge>\n            {subscription.currentPlan === \"premium\" && (\n              <Badge variant=\"outline\" className=\"ml-2\">\n                <Crown className=\"h-3 w-3 mr-1 text-yellow-500\" />\n                Premium\n              </Badge>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Subscription Management */}\n      {subscription.currentPlan === \"free\" ? (\n        <Card className=\"max-w-md mx-auto\">\n          <CardHeader>\n            <CardTitle className=\"text-lg flex items-center gap-2\">\n              <Crown className=\"h-5 w-5 text-yellow-500\" />\n              Subscribe Now\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {/* Premium Plan Card */}\n            <Card className=\"border-primary\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-baseline gap-1\">\n                  <span className=\"text-2xl font-bold\">\n                    {formatPrice(12.99, \"GBP\")}\n                  </span>\n                  <span className=\"text-sm text-muted-foreground\">\n                    /month\n                  </span>\n                </div>\n              </CardHeader>\n              <CardContent className=\"pt-0\">\n                <ul className=\"space-y-2\">\n                  {premiumPlanFeatures.map((feature, index) => (\n                    <li key={index} className=\"flex items-center gap-2 text-sm\">\n                      <CheckCircle className=\"h-4 w-4 text-green-500 flex-shrink-0\" />\n                      <span>{feature.name}</span>\n                    </li>\n                  ))}\n                </ul>\n              </CardContent>\n            </Card>\n\n            <Button \n              onClick={handleUpgrade}\n              disabled={isLoading}\n              className=\"w-full h-9 sm:h-11 text-sm sm:text-base\"\n            >\n              {isLoading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Processing...\n                </>\n              ) : (\n                <>\n                  <Crown className=\"mr-2 h-4 w-4\" />\n                  Upgrade Now\n                  <ArrowUpRight className=\"ml-2 h-4 w-4\" />\n                </>\n              )}\n            </Button>\n            <p className=\"text-xs text-muted-foreground text-center mt-1\">\n              You'll be redirected to Stripe to complete your payment\n            </p>\n          </CardContent>\n        </Card>\n      ) : (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg flex items-center gap-2\">\n              <Crown className=\"h-5 w-5 text-yellow-500\" />\n              Subscription Management\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {/* Plan Details */}\n            <div className=\"space-y-3\">\n              {subscription.amount && (\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">Billing amount:</span>\n                  <span className=\"font-medium\">\n                    {formatPrice(subscription.amount, subscription.currency || \"GBP\")}/{subscription.interval}\n                  </span>\n                </div>\n              )}\n              \n              {subscription.nextBillingDate && (\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">Next billing:</span>\n                  <span className=\"font-medium flex items-center gap-1\">\n                    <Calendar className=\"h-3 w-3\" />\n                    {formatDate(subscription.nextBillingDate)}\n                  </span>\n                </div>\n              )}\n            </div>\n\n            {/* Plan Features Summary */}\n            <div className=\"p-3 bg-muted/50 rounded-md\">\n              <h4 className=\"font-medium text-sm mb-2\">Plan Features:</h4>\n              <ul className=\"text-sm text-muted-foreground space-y-1\">\n                {premiumPlanFeatures.map((feature, index) => (\n                  <li key={index}>• {feature.name}</li>\n                ))}\n              </ul>\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"flex flex-col sm:flex-row gap-2\">\n              <Button \n                variant=\"outline\"\n                onClick={handleManageSubscription}\n                disabled={isLoading}\n                className=\"flex-1 h-9 sm:h-10\"\n              >\n                {isLoading ? (\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                ) : (\n                  <Settings className=\"mr-2 h-4 w-4\" />\n                )}\n                Manage Subscription\n              </Button>\n            </div>\n\n            {subscription.status === \"cancelled\" && (\n              <div className=\"w-full p-3 bg-orange-50 border border-orange-200 rounded-md\">\n                <p className=\"text-sm text-orange-800\">\n                  Your subscription has been cancelled. You'll lose access on {subscription.nextBillingDate ? formatDate(subscription.nextBillingDate) : \"your next billing date\"}.\n                </p>\n              </div>\n            )}\n\n            {subscription.status === \"past_due\" && (\n              <div className=\"w-full p-3 bg-red-50 border border-red-200 rounded-md\">\n                <p className=\"text-sm text-red-800\">\n                  Your payment is past due. Please update your payment method to continue using premium features.\n                </p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  )\n} "],"names":["useState","useMemo","validatePassword","isPasswordValid","auth","error","jsxs","Card","CardHeader","jsx","CardTitle","CardDescription","CardFooter","Button","CardContent","Label","Input","EyeOff","Eye","PasswordStrengthIndicator","Fragment","Loader2","MailCheck","cva","cn","useEffect","api","CheckCircle","XCircle","AlertCircle","Crown","User","Mail","Calendar","ArrowUpRight","Settings"],"mappings":";;;;;;;;;;AAoBA,SAAwB,mBAAmB,EAAE,WAAW,SAAS,iBAAiB,SAAkC;AAClH,QAAM,CAAC,WAAW,YAAY,IAAIA,MAAAA,SAAS,KAAK;AAChD,QAAM,CAAC,OAAO,QAAQ,IAAIA,MAAAA,SAAS,EAAE;AACrC,QAAM,CAAC,aAAa,cAAc,IAAIA,MAAAA,SAAS,EAAE;AACjD,QAAM,CAAC,iBAAiB,kBAAkB,IAAIA,MAAAA,SAAS,EAAE;AACzD,QAAM,CAAC,SAAS,UAAU,IAAIA,MAAAA,SAAS,KAAK;AAC5C,QAAM,CAAC,iBAAiB,kBAAkB,IAAIA,MAAAA,SAAS,KAAK;AAC5D,QAAM,CAAC,qBAAqB,sBAAsB,IAAIA,MAAAA,SAAS,KAAK;AAGpE,QAAM,mBAAmBC,MAAAA,QAAQ,MAAM;AACrC,WAAOC,KAAAA,iBAAiB,WAAW;AAAA,EAAA,GAClC,CAAC,WAAW,CAAC;AAEhB,QAAM,eAAe,OAAO,MAAuB;AACjD,MAAE,eAAA;AAEF,QAAI,CAAC,eAAe,CAAC,iBAAiB;AACpC,eAAS,2BAA2B;AACpC;AAAA,IAAA;AAGF,QAAI,gBAAgB,iBAAiB;AACnC,eAAS,wBAAwB;AACjC;AAAA,IAAA;AAGF,QAAI,CAACC,KAAAA,gBAAgB,WAAW,GAAG;AACjC,eAAS,yCAAyC;AAClD;AAAA,IAAA;AAGF,QAAI,CAAC,OAAO;AACV,eAAS,yBAAyB;AAClC;AAAA,IAAA;AAGF,iBAAa,IAAI;AACjB,aAAS,EAAE;AACX,eAAW,KAAK;AAEhB,QAAI;AACF,YAAM,WAAW,MAAMC,KAAAA,KAAK,eAAe,OAAO,WAAW;AAC7D,cAAQ,IAAI,6BAA6B,QAAQ;AAEjD,iBAAW,IAAI;AACf;AAAA,IAAY,SAELC,QAAO;AACd,YAAM,eAAeA,kBAAiB,QAAQA,OAAM,UAAU;AAC9D,eAAS,YAAY;AACrB,yCAAU;AAAA,IAAY,UACxB;AACE,mBAAa,KAAK;AAAA,IAAA;AAAA,EACpB;AAGF,MAAI,SAAS;AACX,WACEC,2BAAAA,KAACC,MAAAA,MAAA,EAAK,WAAU,+DACd,UAAA;AAAA,MAAAD,2BAAAA,KAACE,MAAAA,YAAA,EAAW,WAAU,uCACpB,UAAA;AAAA,QAAAC,2BAAAA,IAACC,MAAAA,WAAA,EAAU,WAAU,0DAAyD,UAAA,oBAAgB;AAAA,QAC9FD,2BAAAA,IAACE,MAAAA,iBAAA,EAAgB,WAAU,+CAA8C,UAAA,+CAAA,CAEzE;AAAA,MAAA,GACF;AAAA,MACAF,2BAAAA,IAACG,MAAAA,YAAA,EAAW,WAAU,kEACpB,UAAAH,2BAAAA,IAACI,MAAAA,QAAA,EAAO,SAAS,iBAAiB,WAAU,2CAA0C,UAAA,gBAAA,CAEtF,EAAA,CACF;AAAA,IAAA,GACF;AAAA,EAAA;AAIJ,SACEP,2BAAAA,KAACC,MAAAA,MAAA,EAAK,WAAU,+DACd,UAAA;AAAA,IAAAD,2BAAAA,KAACE,MAAAA,YAAA,EAAW,WAAU,uCACpB,UAAA;AAAA,MAAAC,2BAAAA,IAACC,MAAAA,WAAA,EAAU,WAAU,0DAAyD,UAAA,oBAAgB;AAAA,MAC9FD,2BAAAA,IAACE,MAAAA,iBAAA,EAAgB,WAAU,+CAA8C,UAAA,gCAAA,CAEzE;AAAA,IAAA,GACF;AAAA,IACAL,2BAAAA,KAAC,QAAA,EAAK,UAAU,cACd,UAAA;AAAA,MAAAA,2BAAAA,KAACQ,MAAAA,aAAA,EAAY,WAAU,uCACpB,UAAA;AAAA,QAAA,SACCL,2BAAAA,IAAC,OAAA,EAAI,WAAU,kFACZ,UAAA,OACH;AAAA,QAGFH,2BAAAA,KAAC,OAAA,EAAI,WAAU,aACb,UAAA;AAAA,UAAAG,+BAACM,MAAAA,OAAA,EAAM,SAAQ,eAAc,WAAU,mCAAkC,UAAA,gBAAY;AAAA,UACrFT,2BAAAA,KAAC,OAAA,EAAI,WAAU,YACb,UAAA;AAAA,YAAAG,2BAAAA;AAAAA,cAACO,MAAAA;AAAAA,cAAA;AAAA,gBACC,IAAG;AAAA,gBACH,MAAK;AAAA,gBACL,MAAM,kBAAkB,SAAS;AAAA,gBACjC,aAAY;AAAA,gBACZ,OAAO;AAAA,gBACP,UAAU,CAAC,MAAM,eAAe,EAAE,OAAO,KAAK;AAAA,gBAC9C,UAAQ;AAAA,gBACR,UAAU;AAAA,gBACV,WAAU;AAAA,cAAA;AAAA,YAAA;AAAA,YAEZV,2BAAAA;AAAAA,cAACO,MAAAA;AAAAA,cAAA;AAAA,gBACC,MAAK;AAAA,gBACL,SAAQ;AAAA,gBACR,MAAK;AAAA,gBACL,WAAU;AAAA,gBACV,SAAS,MAAM,mBAAmB,CAAC,eAAe;AAAA,gBAClD,UAAU;AAAA,gBAET,UAAA;AAAA,kBAAA,kBAAkBJ,2BAAAA,IAACQ,sBAAO,WAAU,wBAAA,CAAwB,IAAKR,2BAAAA,IAACS,YAAAA,KAAA,EAAI,WAAU,wBAAA,CAAwB;AAAA,iDACxG,QAAA,EAAK,WAAU,WAAW,UAAA,kBAAkB,kBAAkB,gBAAA,CAAgB;AAAA,gBAAA;AAAA,cAAA;AAAA,YAAA;AAAA,UACjF,GACF;AAAA,UAEC,eACCT,2BAAAA,IAAC,OAAA,EAAI,WAAU,0DACb,UAAAA,2BAAAA,IAACU,SAAAA,2BAAA,EAA0B,UAAU,kBAAkB,SAAS,KAAA,CAAM,EAAA,CACxE;AAAA,QAAA,GAEJ;AAAA,QAEAb,2BAAAA,KAAC,OAAA,EAAI,WAAU,kBACb,UAAA;AAAA,UAAAG,+BAACM,MAAAA,OAAA,EAAM,SAAQ,mBAAkB,WAAU,mCAAkC,UAAA,wBAAoB;AAAA,UACjGT,2BAAAA,KAAC,OAAA,EAAI,WAAU,YACb,UAAA;AAAA,YAAAG,2BAAAA;AAAAA,cAACO,MAAAA;AAAAA,cAAA;AAAA,gBACC,IAAG;AAAA,gBACH,MAAK;AAAA,gBACL,MAAM,sBAAsB,SAAS;AAAA,gBACrC,aAAY;AAAA,gBACZ,OAAO;AAAA,gBACP,UAAU,CAAC,MAAM,mBAAmB,EAAE,OAAO,KAAK;AAAA,gBAClD,UAAQ;AAAA,gBACR,UAAU;AAAA,gBACV,WAAU;AAAA,cAAA;AAAA,YAAA;AAAA,YAEZV,2BAAAA;AAAAA,cAACO,MAAAA;AAAAA,cAAA;AAAA,gBACC,MAAK;AAAA,gBACL,SAAQ;AAAA,gBACR,MAAK;AAAA,gBACL,WAAU;AAAA,gBACV,SAAS,MAAM,uBAAuB,CAAC,mBAAmB;AAAA,gBAC1D,UAAU;AAAA,gBAET,UAAA;AAAA,kBAAA,sBAAsBJ,2BAAAA,IAACQ,sBAAO,WAAU,wBAAA,CAAwB,IAAKR,2BAAAA,IAACS,YAAAA,KAAA,EAAI,WAAU,wBAAA,CAAwB;AAAA,iDAC5G,QAAA,EAAK,WAAU,WAAW,UAAA,sBAAsB,kBAAkB,gBAAA,CAAgB;AAAA,gBAAA;AAAA,cAAA;AAAA,YAAA;AAAA,UACrF,EAAA,CACF;AAAA,QAAA,EAAA,CACF;AAAA,MAAA,GACF;AAAA,MAEAZ,2BAAAA,KAACM,MAAAA,YAAA,EAAW,WAAU,kEACpB,UAAA;AAAA,QAAAH,2BAAAA,IAACI,MAAAA,QAAA,EAAO,MAAK,UAAS,WAAU,2CAA0C,UAAU,aAAa,CAACV,KAAAA,gBAAgB,WAAW,GAC1H,UAAA,YACCG,gCAAAc,WAAAA,UAAA,EACE,UAAA;AAAA,UAAAX,2BAAAA,IAACY,YAAAA,SAAA,EAAQ,WAAU,0CAAA,CAA0C;AAAA,UAAE;AAAA,QAAA,EAAA,CAEjE,IAEA,mBAEJ;AAAA,QACAf,2BAAAA,KAAC,KAAA,EAAE,WAAU,wDAAuD,UAAA;AAAA,UAAA;AAAA,UAC1C;AAAA,UACxBG,2BAAAA;AAAAA,YAAC;AAAA,YAAA;AAAA,cACC,MAAK;AAAA,cACL,SAAS;AAAA,cACT,WAAU;AAAA,cACX,UAAA;AAAA,YAAA;AAAA,UAAA;AAAA,QAED,EAAA,CACF;AAAA,MAAA,EAAA,CACF;AAAA,IAAA,EAAA,CACF;AAAA,EAAA,GACF;AAEJ;ACvLA,SAAwB,sBAAsB,EAAE,WAAW,SAAS,iBAAiB,SAAqC;AACxH,QAAM,CAAC,WAAW,YAAY,IAAIT,MAAAA,SAAS,KAAK;AAChD,QAAM,CAAC,OAAO,QAAQ,IAAIA,MAAAA,SAAS,EAAE;AACrC,QAAM,CAAC,SAAS,UAAU,IAAIA,MAAAA,SAAS,KAAK;AAE5C,QAAM,eAAe,OAAO,MAAuB;AACjD,MAAE,eAAA;AAEF,QAAI,CAAC,OAAO;AACV,eAAS,gCAAgC;AACzC;AAAA,IAAA;AAGF,iBAAa,IAAI;AACjB,aAAS,EAAE;AACX,eAAW,KAAK;AAEhB,QAAI;AACF,YAAM,WAAW,MAAMI,UAAK,YAAY,KAAK;AAC7C,cAAQ,IAAI,gCAAgC,QAAQ;AAEpD,iBAAW,IAAI;AACf;AAAA,IAAY,SAELC,QAAO;AACd,YAAM,eAAeA,kBAAiB,QAAQA,OAAM,UAAU;AAC9D,eAAS,YAAY;AACrB,yCAAU;AAAA,IAAY,UACxB;AACE,mBAAa,KAAK;AAAA,IAAA;AAAA,EACpB;AAGF,MAAI,SAAS;AACX,WACEC,2BAAAA,KAACC,MAAAA,MAAA,EAAK,WAAU,+DACd,UAAA;AAAA,MAAAD,2BAAAA,KAACE,MAAAA,YAAA,EAAW,WAAU,uCACpB,UAAA;AAAA,QAAAC,2BAAAA,IAACC,MAAAA,WAAA,EAAU,WAAU,0DAAyD,UAAA,mBAAe;AAAA,QAC7FD,2BAAAA,IAACE,MAAAA,iBAAA,EAAgB,WAAU,+CAA8C,UAAA,qDAAA,CAEzE;AAAA,MAAA,GACF;AAAA,MACAF,2BAAAA,IAACG,MAAAA,YAAA,EAAW,WAAU,kEACpB,UAAAH,2BAAAA,IAACI,MAAAA,QAAA,EAAO,SAAS,iBAAiB,WAAU,2CAA0C,UAAA,gBAAA,CAEtF,EAAA,CACF;AAAA,IAAA,GACF;AAAA,EAAA;AAIJ,SACEP,2BAAAA,KAACC,MAAAA,MAAA,EAAK,WAAU,+DACd,UAAA;AAAA,IAAAD,2BAAAA,KAACE,MAAAA,YAAA,EAAW,WAAU,uCAEpB,UAAA;AAAA,MAAAC,2BAAAA,IAACC,MAAAA,WAAA,EAAU,WAAU,0DAAyD,UAAA,sBAAkB;AAAA,MAChGD,2BAAAA,IAAC,SAAI,WAAU,4BACb,yCAACa,YAAAA,WAAA,EAAU,WAAU,4BAA2B,EAAA,CAClD;AAAA,MACAb,2BAAAA,IAACE,MAAAA,iBAAA,EAAgB,WAAU,+CAA8C,UAAA,0CAAA,CAEzE;AAAA,IAAA,GACF;AAAA,IACAL,2BAAAA,KAAC,QAAA,EAAK,UAAU,cACd,UAAA;AAAA,MAAAG,2BAAAA,IAACK,MAAAA,aAAA,EAAY,WAAU,uCACpB,UAAA,wCACE,OAAA,EAAI,WAAU,kFACZ,UAAA,MAAA,CACH,EAAA,CAEJ;AAAA,MAEAL,+BAACG,MAAAA,YAAA,EAAW,WAAU,kEACpB,UAAAH,2BAAAA,IAACI,cAAA,EAAO,MAAK,UAAS,WAAU,2CAA0C,UAAU,WACjF,sBACCP,2BAAAA,KAAAc,qBAAA,EACE,UAAA;AAAA,QAAAX,2BAAAA,IAACY,YAAAA,SAAA,EAAQ,WAAU,0CAAA,CAA0C;AAAA,QAAE;AAAA,MAAA,GAEjE,IAEA,gBAEJ,EAAA,CACF;AAAA,IAAA,EAAA,CACF;AAAA,EAAA,GACF;AAEJ;AClGA,MAAM,gBAAgBE,uBAAAA;AAAAA,EACpB;AAAA,EACA;AAAA,IACE,UAAU;AAAA,MACR,SAAS;AAAA,QACP,SACE;AAAA,QACF,WACE;AAAA,QACF,aACE;AAAA,QACF,SAAS;AAAA,MAAA;AAAA,IACX;AAAA,IAEF,iBAAiB;AAAA,MACf,SAAS;AAAA,IAAA;AAAA,EACX;AAEJ;AAMA,SAAS,MAAM,EAAE,WAAW,SAAS,GAAG,SAAqB;AAC3D,SACEd,+BAAC,OAAA,EAAI,WAAWe,KAAAA,GAAG,cAAc,EAAE,QAAA,CAAS,GAAG,SAAS,GAAI,GAAG,MAAA,CAAO;AAE1E;ACMA,SAAwB,gBAAgB;AAAA,EACtC;AAAA,EACA,sBAAsB;AAAA,IACpB,EAAE,MAAM,qBAAA;AAAA,IACR,EAAE,MAAM,qBAAA;AAAA,IACR,EAAE,MAAM,mBAAA;AAAA,EAAmB;AAAA,EAE7B;AACF,GAAyB;AACvB,QAAM,CAAC,WAAW,YAAY,IAAIxB,MAAAA,SAAS,KAAK;AAChD,QAAM,CAAC,cAAc,eAAe,IAAIA,MAAAA,SAAoC,IAAI;AAChF,QAAM,CAAC,OAAO,QAAQ,IAAIA,MAAAA,SAAwB,IAAI;AACtD,QAAM,CAAC,gBAAgB,iBAAiB,IAAIA,MAAAA,SAAwB,IAAI;AAGxEyB,QAAAA,UAAU,MAAM;AACd,UAAM,YAAY,IAAI,gBAAgB,OAAO,SAAS,MAAM;AAC5D,UAAM,SAAS,UAAU,IAAI,QAAQ;AAErC,QAAI,WAAW,WAAW;AACxB,wBAAkB,uEAAuE;AAEzF,aAAO,QAAQ,aAAa,CAAA,GAAI,SAAS,OAAO,OAAO,SAAS,QAAQ;AAAA,IAAA,WAC/D,WAAW,aAAa;AACjC,eAAS,mDAAmD;AAE5D,aAAO,QAAQ,aAAa,CAAA,GAAI,SAAS,OAAO,OAAO,SAAS,QAAQ;AAAA,IAAA;AAAA,EAC1E,GACC,EAAE;AAGLA,QAAAA,UAAU,MAAM;AACd,4BAAA;AAAA,EAAwB,GACvB,EAAE;AAEL,QAAM,0BAA0B,YAAY;AAC1C,QAAI;AACF,YAAM,SAAS,MAAMC,KAAAA,IAAI,sBAAA;AACzB,sBAAgB,MAAM;AACtB,eAAS,IAAI;AAAA,IAAA,SACN,KAAK;AACZ,cAAQ,MAAM,wCAAwC,GAAG;AACzD,eAAS,oCAAoC;AAE7C,sBAAgB;AAAA,QACd,aAAa;AAAA,QACb,QAAQ;AAAA,MAAA,CACT;AAAA,IAAA;AAAA,EACH;AAGF,QAAM,aAAa,CAAC,eAAuB;AACzC,WAAO,IAAI,KAAK,UAAU,EAAE,mBAAmB,SAAS;AAAA,MACtD,MAAM;AAAA,MACN,OAAO;AAAA,MACP,KAAK;AAAA,IAAA,CACN;AAAA,EAAA;AAGH,QAAM,cAAc,CAAC,OAAe,aAAqB;AACvD,WAAO,IAAI,KAAK,aAAa,SAAS;AAAA,MACpC,OAAO;AAAA,MACP;AAAA,IAAA,CACD,EAAE,OAAO,KAAK;AAAA,EAAA;AAGjB,QAAM,kBAAkB,MAAM;AAC5B,QAAI,CAAC,aAAc,QAAO;AAE1B,YAAQ,aAAa,QAAA;AAAA,MACnB,KAAK;AACH,eAAO;AAAA,UACL,MAAMC,YAAAA;AAAAA,UACN,OAAO;AAAA,UACP,SAAS;AAAA,UACT,aAAa;AAAA,UACb,MAAM;AAAA,QAAA;AAAA,MAEV,KAAK;AACH,eAAO;AAAA,UACL,MAAMC,YAAAA;AAAAA,UACN,OAAO;AAAA,UACP,SAAS;AAAA,UACT,aAAa;AAAA,UACb,MAAM;AAAA,QAAA;AAAA,MAEV,KAAK;AACH,eAAO;AAAA,UACL,MAAMC,YAAAA;AAAAA,UACN,OAAO;AAAA,UACP,SAAS;AAAA,UACT,aAAa;AAAA,UACb,MAAM;AAAA,QAAA;AAAA,MAEV,KAAK;AACH,eAAO;AAAA,UACL,MAAMC,YAAAA;AAAAA,UACN,OAAO;AAAA,UACP,SAAS;AAAA,UACT,aAAa;AAAA,UACb,MAAM;AAAA,QAAA;AAAA,MAEV;AACE,eAAO;AAAA,UACL,MAAMD,YAAAA;AAAAA,UACN,OAAO;AAAA,UACP,SAAS;AAAA,UACT,aAAa;AAAA,UACb,MAAM;AAAA,QAAA;AAAA,IACR;AAAA,EACJ;AAGF,QAAM,gBAAgB,YAAY;AAChC,iBAAa,IAAI;AACjB,aAAS,IAAI;AACb,sBAAkB,IAAI;AAEtB,QAAI;AAEF,YAAM,WAAW,MAAMH,KAAAA,IAAI,sBAAsB;AAAA,QAC/C,YAAY,GAAG,OAAO,SAAS,MAAM,GAAG,OAAO,SAAS,QAAQ;AAAA,QAChE,WAAW,GAAG,OAAO,SAAS,MAAM,GAAG,OAAO,SAAS,QAAQ;AAAA,QAC/D,QAAQ;AAAA;AAAA,MAAA,CACT;AAGD,aAAO,SAAS,OAAO,SAAS;AAAA,IAAA,SACzB,KAAK;AACZ,cAAQ,MAAM,sCAAsC,GAAG;AACvD,eAAS,oDAAoD;AAAA,IAAA,UAC/D;AACE,mBAAa,KAAK;AAAA,IAAA;AAAA,EACpB;AAGF,QAAM,2BAA2B,YAAY;AAC3C,iBAAa,IAAI;AACjB,aAAS,IAAI;AACb,sBAAkB,IAAI;AAEtB,QAAI;AAEF,YAAM,WAAW,MAAMA,KAAAA,IAAI,oBAAoB;AAAA,QAC7C,WAAW,GAAG,OAAO,SAAS,MAAM,GAAG,OAAO,SAAS,QAAQ;AAAA,MAAA,CAChE;AAGD,aAAO,SAAS,OAAO,SAAS;AAAA,IAAA,SACzB,KAAK;AACZ,cAAQ,MAAM,oCAAoC,GAAG;AACrD,eAAS,2DAA2D;AAAA,IAAA,UACtE;AACE,mBAAa,KAAK;AAAA,IAAA;AAAA,EACpB;AAIF,MAAI,CAAC,cAAc;AACjB,WACEjB,2BAAAA,IAAC,OAAA,EAAI,WAAW,sCAAsC,aAAa,EAAE,IACnE,UAAAA,2BAAAA,IAACF,MAAAA,MAAA,EACC,UAAAD,2BAAAA,KAACQ,MAAAA,aAAA,EAAY,WAAU,0CACrB,UAAA;AAAA,MAAAL,2BAAAA,IAACY,YAAAA,SAAA,EAAQ,WAAU,uBAAA,CAAuB;AAAA,MAC1CZ,2BAAAA,IAAC,QAAA,EAAK,WAAU,QAAO,UAAA,kCAAA,CAA+B;AAAA,IAAA,EAAA,CACxD,GACF,GACF;AAAA,EAAA;AAIJ,QAAM,eAAe,gBAAA;AACrB,QAAM,cAAa,6CAAc,SAAQoB,YAAAA;AAEzC,yCACG,OAAA,EAAI,WAAW,qCAAqC,aAAa,EAAE,IAEjE,UAAA;AAAA,IAAA,kBACCpB,2BAAAA,IAACF,YAAA,EAAK,WAAU,gCACd,UAAAE,2BAAAA,IAACK,MAAAA,aAAA,EAAY,WAAU,QACrB,UAAAR,2BAAAA,KAAC,OAAA,EAAI,WAAU,0CACb,UAAA;AAAA,MAAAG,2BAAAA,IAACkB,YAAAA,aAAA,EAAY,WAAU,UAAA,CAAU;AAAA,MACjClB,2BAAAA,IAAC,QAAA,EAAK,WAAU,WAAW,UAAA,eAAA,CAAe;AAAA,IAAA,EAAA,CAC5C,GACF,GACF;AAAA,IAID,SACCA,2BAAAA,IAACF,YAAA,EAAK,WAAU,4BACd,UAAAE,2BAAAA,IAACK,MAAAA,aAAA,EAAY,WAAU,QACrB,UAAAR,2BAAAA,KAAC,OAAA,EAAI,WAAU,wCACb,UAAA;AAAA,MAAAG,2BAAAA,IAACoB,YAAAA,aAAA,EAAY,WAAU,UAAA,CAAU;AAAA,MACjCpB,2BAAAA,IAAC,QAAA,EAAK,WAAU,WAAW,UAAA,MAAA,CAAM;AAAA,IAAA,EAAA,CACnC,GACF,GACF;AAAA,oCAIDF,MAAAA,MAAA,EACC,UAAA;AAAA,MAAAD,gCAACE,MAAAA,YAAA,EACC,UAAA;AAAA,QAAAF,2BAAAA,KAACI,MAAAA,WAAA,EAAU,WAAU,mCACnB,UAAA;AAAA,UAAAD,2BAAAA,IAACsB,YAAAA,MAAA,EAAK,WAAU,UAAA,CAAU;AAAA,UAAE;AAAA,QAAA,GAE9B;AAAA,QACAtB,2BAAAA,IAACE,MAAAA,mBAAgB,UAAA,mDAAA,CAEjB;AAAA,MAAA,GACF;AAAA,MACAL,2BAAAA,KAACQ,MAAAA,aAAA,EAAY,WAAU,aAErB,UAAA;AAAA,QAAAR,2BAAAA,KAAC,OAAA,EAAI,WAAU,yCACb,UAAA;AAAA,UAAAA,2BAAAA,KAAC,OAAA,EAAI,WAAU,2BACb,UAAA;AAAA,YAAAG,2BAAAA,IAACuB,YAAAA,MAAA,EAAK,WAAU,gCAAA,CAAgC;AAAA,4CAC/C,OAAA,EACC,UAAA;AAAA,cAAAvB,2BAAAA,IAAC,KAAA,EAAE,WAAU,uBAAsB,UAAA,SAAK;AAAA,cACxCA,2BAAAA,IAAC,KAAA,EAAE,WAAU,iCAAiC,eAAK,MAAA,CAAM;AAAA,YAAA,EAAA,CAC3D;AAAA,UAAA,GACF;AAAA,UACAH,2BAAAA,KAAC,OAAA,EAAI,WAAU,2BACb,UAAA;AAAA,YAAAG,2BAAAA,IAACwB,YAAAA,UAAA,EAAS,WAAU,gCAAA,CAAgC;AAAA,4CACnD,OAAA,EACC,UAAA;AAAA,cAAAxB,2BAAAA,IAAC,KAAA,EAAE,WAAU,uBAAsB,UAAA,gBAAY;AAAA,6CAC9C,KAAA,EAAE,WAAU,iCAAiC,UAAA,WAAW,KAAK,WAAW,EAAA,CAAE;AAAA,YAAA,EAAA,CAC7E;AAAA,UAAA,EAAA,CACF;AAAA,QAAA,GACF;AAAA,QAGAH,2BAAAA,KAAC,OAAA,EAAI,WAAU,2BACb,UAAA;AAAA,UAAAG,2BAAAA,IAAC,QAAA,EAAK,WAAU,uBAAsB,UAAA,WAAO;AAAA,UAC7CH,2BAAAA;AAAAA,YAAC;AAAA,YAAA;AAAA,cACC,SAAS,aAAa,WAAW,WAAW,YAAY;AAAA,cACxD,WAAW,GAAG,6CAAc,OAAO,IAAI,6CAAc,WAAW,IAAI,6CAAc,KAAK;AAAA,cAEvF,UAAA;AAAA,gBAAAG,2BAAAA,IAAC,YAAA,EAAW,WAAU,eAAA,CAAe;AAAA,gBACpC,6CAAc;AAAA,cAAA;AAAA,YAAA;AAAA,UAAA;AAAA,UAEhB,aAAa,gBAAgB,aAC5BH,2BAAAA,KAAC,SAAM,SAAQ,WAAU,WAAU,QACjC,UAAA;AAAA,YAAAG,2BAAAA,IAACqB,YAAAA,OAAA,EAAM,WAAU,+BAAA,CAA+B;AAAA,YAAE;AAAA,UAAA,EAAA,CAEpD;AAAA,QAAA,EAAA,CAEJ;AAAA,MAAA,EAAA,CACF;AAAA,IAAA,GACF;AAAA,IAGC,aAAa,gBAAgB,SAC5BxB,2BAAAA,KAACC,MAAAA,MAAA,EAAK,WAAU,oBACd,UAAA;AAAA,MAAAE,+BAACD,MAAAA,YAAA,EACC,UAAAF,2BAAAA,KAACI,MAAAA,WAAA,EAAU,WAAU,mCACnB,UAAA;AAAA,QAAAD,2BAAAA,IAACqB,YAAAA,OAAA,EAAM,WAAU,0BAAA,CAA0B;AAAA,QAAE;AAAA,MAAA,EAAA,CAE/C,EAAA,CACF;AAAA,MACAxB,2BAAAA,KAACQ,MAAAA,aAAA,EAAY,WAAU,aAErB,UAAA;AAAA,QAAAR,2BAAAA,KAACC,MAAAA,MAAA,EAAK,WAAU,kBACd,UAAA;AAAA,UAAAE,2BAAAA,IAACD,MAAAA,cAAW,WAAU,QACpB,UAAAF,2BAAAA,KAAC,OAAA,EAAI,WAAU,6BACb,UAAA;AAAA,YAAAG,+BAAC,UAAK,WAAU,sBACb,UAAA,YAAY,OAAO,KAAK,GAC3B;AAAA,YACAA,2BAAAA,IAAC,QAAA,EAAK,WAAU,iCAAgC,UAAA,SAAA,CAEhD;AAAA,UAAA,EAAA,CACF,EAAA,CACF;AAAA,yCACCK,MAAAA,aAAA,EAAY,WAAU,QACrB,UAAAL,+BAAC,QAAG,WAAU,aACX,UAAA,oBAAoB,IAAI,CAAC,SAAS,UACjCH,gCAAC,MAAA,EAAe,WAAU,mCACxB,UAAA;AAAA,YAAAG,2BAAAA,IAACkB,YAAAA,aAAA,EAAY,WAAU,uCAAA,CAAuC;AAAA,YAC9DlB,2BAAAA,IAAC,QAAA,EAAM,UAAA,QAAQ,KAAA,CAAK;AAAA,UAAA,KAFb,KAGT,CACD,EAAA,CACH,EAAA,CACF;AAAA,QAAA,GACF;AAAA,QAEAA,2BAAAA;AAAAA,UAACI,MAAAA;AAAAA,UAAA;AAAA,YACC,SAAS;AAAA,YACT,UAAU;AAAA,YACV,WAAU;AAAA,YAET,sBACCP,2BAAAA,KAAAc,WAAAA,UAAA,EACE,UAAA;AAAA,cAAAX,2BAAAA,IAACY,YAAAA,SAAA,EAAQ,WAAU,4BAAA,CAA4B;AAAA,cAAE;AAAA,YAAA,EAAA,CAEnD,IAEAf,2BAAAA,KAAAc,WAAAA,UAAA,EACE,UAAA;AAAA,cAAAX,2BAAAA,IAACqB,YAAAA,OAAA,EAAM,WAAU,eAAA,CAAe;AAAA,cAAE;AAAA,cAElCrB,2BAAAA,IAACyB,YAAAA,cAAA,EAAa,WAAU,eAAA,CAAe;AAAA,YAAA,EAAA,CACzC;AAAA,UAAA;AAAA,QAAA;AAAA,QAGJzB,2BAAAA,IAAC,KAAA,EAAE,WAAU,kDAAiD,UAAA,0DAAA,CAE9D;AAAA,MAAA,EAAA,CACF;AAAA,IAAA,EAAA,CACF,oCAECF,MAAAA,MAAA,EACC,UAAA;AAAA,MAAAE,+BAACD,MAAAA,YAAA,EACC,UAAAF,2BAAAA,KAACI,MAAAA,WAAA,EAAU,WAAU,mCACnB,UAAA;AAAA,QAAAD,2BAAAA,IAACqB,YAAAA,OAAA,EAAM,WAAU,0BAAA,CAA0B;AAAA,QAAE;AAAA,MAAA,EAAA,CAE/C,EAAA,CACF;AAAA,MACAxB,2BAAAA,KAACQ,MAAAA,aAAA,EAAY,WAAU,aAErB,UAAA;AAAA,QAAAR,2BAAAA,KAAC,OAAA,EAAI,WAAU,aACZ,UAAA;AAAA,UAAA,aAAa,UACZA,gCAAC,OAAA,EAAI,WAAU,6CACb,UAAA;AAAA,YAAAG,2BAAAA,IAAC,QAAA,EAAK,WAAU,yBAAwB,UAAA,mBAAe;AAAA,YACvDH,2BAAAA,KAAC,QAAA,EAAK,WAAU,eACb,UAAA;AAAA,cAAA,YAAY,aAAa,QAAQ,aAAa,YAAY,KAAK;AAAA,cAAE;AAAA,cAAE,aAAa;AAAA,YAAA,EAAA,CACnF;AAAA,UAAA,GACF;AAAA,UAGD,aAAa,mBACZA,gCAAC,OAAA,EAAI,WAAU,6CACb,UAAA;AAAA,YAAAG,2BAAAA,IAAC,QAAA,EAAK,WAAU,yBAAwB,UAAA,iBAAa;AAAA,YACrDH,2BAAAA,KAAC,QAAA,EAAK,WAAU,uCACd,UAAA;AAAA,cAAAG,2BAAAA,IAACwB,YAAAA,UAAA,EAAS,WAAU,UAAA,CAAU;AAAA,cAC7B,WAAW,aAAa,eAAe;AAAA,YAAA,EAAA,CAC1C;AAAA,UAAA,EAAA,CACF;AAAA,QAAA,GAEJ;AAAA,QAGA3B,2BAAAA,KAAC,OAAA,EAAI,WAAU,8BACb,UAAA;AAAA,UAAAG,2BAAAA,IAAC,MAAA,EAAG,WAAU,4BAA2B,UAAA,kBAAc;AAAA,UACvDA,2BAAAA,IAAC,MAAA,EAAG,WAAU,2CACX,UAAA,oBAAoB,IAAI,CAAC,SAAS,UACjCH,2BAAAA,KAAC,MAAA,EAAe,UAAA;AAAA,YAAA;AAAA,YAAG,QAAQ;AAAA,UAAA,EAAA,GAAlB,KAAuB,CACjC,EAAA,CACH;AAAA,QAAA,GACF;AAAA,QAGAG,2BAAAA,IAAC,OAAA,EAAI,WAAU,mCACb,UAAAH,2BAAAA;AAAAA,UAACO,MAAAA;AAAAA,UAAA;AAAA,YACC,SAAQ;AAAA,YACR,SAAS;AAAA,YACT,UAAU;AAAA,YACV,WAAU;AAAA,YAET,UAAA;AAAA,cAAA,YACCJ,2BAAAA,IAACY,uBAAQ,WAAU,4BAAA,CAA4B,IAE/CZ,2BAAAA,IAAC0B,YAAAA,UAAA,EAAS,WAAU,eAAA,CAAe;AAAA,cACnC;AAAA,YAAA;AAAA,UAAA;AAAA,QAAA,GAGN;AAAA,QAEC,aAAa,WAAW,eACvB1B,2BAAAA,IAAC,OAAA,EAAI,WAAU,+DACb,UAAAH,2BAAAA,KAAC,KAAA,EAAE,WAAU,2BAA0B,UAAA;AAAA,UAAA;AAAA,UACwB,aAAa,kBAAkB,WAAW,aAAa,eAAe,IAAI;AAAA,UAAyB;AAAA,QAAA,EAAA,CAClK,EAAA,CACF;AAAA,QAGD,aAAa,WAAW,cACvBG,2BAAAA,IAAC,OAAA,EAAI,WAAU,yDACb,UAAAA,2BAAAA,IAAC,KAAA,EAAE,WAAU,wBAAuB,UAAA,kGAAA,CAEpC,EAAA,CACF;AAAA,MAAA,EAAA,CAEJ;AAAA,IAAA,EAAA,CACF;AAAA,EAAA,GAEJ;AAEJ;;;;;;;;;;;;;;;;;;;;;"}