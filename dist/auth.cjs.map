{"version":3,"file":"auth.cjs","sources":["../src/lib/auth.ts"],"sourcesContent":["/**\n * Authentication utilities for connecting React components to the auth service\n */\n\nexport interface User {\n  id: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  createdAt: string;\n}\n\nexport interface Session {\n  id: string;\n  token: string;\n  expiresAt: string;\n}\n\nexport interface AuthResponse {\n  success: boolean;\n  message?: string;\n  error?: string;\n  user?: User;\n  session?: Session;\n}\n\nexport interface LoginData {\n  email: string;\n  password: string;\n}\n\nexport interface SignupData {\n  email: string;\n  password: string;\n  firstName: string;\n  lastName: string;\n}\n\nclass AuthClient {\n  private baseUrl: string;\n  private csrfToken: string | null = null;\n  private isDevelopment: boolean;\n\n  constructor(baseUrl?: string) {\n    // In development, allow overriding the auth service URL\n    if (baseUrl) {\n      this.baseUrl = baseUrl;\n    } else if (typeof window !== 'undefined') {\n      // Check for environment variable or use current domain\n      const authServiceUrl = import.meta.env.VITE_AUTH_SERVICE_URL;\n      this.baseUrl = authServiceUrl || window.location.origin;\n    } else {\n      this.baseUrl = '';\n    }\n    \n    this.isDevelopment = import.meta.env.DEV;\n  }\n\n  /**\n   * Check if we're in development mode and should use mock responses\n   */\n  private shouldUseMock(): boolean {\n    // In development, use mock mode if:\n    // 1. We're in development mode AND\n    // 2. Either no auth service URL is configured OR we're on localhost\n    return this.isDevelopment && (\n      !import.meta.env.VITE_AUTH_SERVICE_URL || \n      this.baseUrl.includes('localhost') ||\n      this.baseUrl.includes('127.0.0.1')\n    );\n  }\n\n  /**\n   * Generate mock user data\n   */\n  private generateMockUser(data: { email: string; firstName?: string; lastName?: string }): User {\n    return {\n      id: `mock-${Date.now()}`,\n      email: data.email,\n      firstName: data.firstName || 'Mock',\n      lastName: data.lastName || 'User',\n      createdAt: new Date().toISOString(),\n    };\n  }\n\n  /**\n   * Generate mock session data\n   */\n  private generateMockSession(): Session {\n    return {\n      id: `session-${Date.now()}`,\n      token: `mock-token-${Date.now()}`,\n      expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), // 24 hours\n    };\n  }\n\n  /**\n   * Get CSRF token for form protection\n   */\n  async getCSRFToken(): Promise<string> {\n    if (this.shouldUseMock()) {\n      this.csrfToken = `mock-csrf-${Date.now()}`;\n      return this.csrfToken;\n    }\n\n    try {\n      const response = await fetch(`${this.baseUrl}/auth/csrf-token`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to get CSRF token: ${response.status} ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      this.csrfToken = data.token;\n      return data.token;\n    } catch (error) {\n      console.error('Error getting CSRF token:', error);\n      if (this.isDevelopment) {\n        console.warn('Using mock CSRF token for development');\n        this.csrfToken = `mock-csrf-${Date.now()}`;\n        return this.csrfToken;\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Check if user is authenticated\n   */\n  isAuthenticated(): boolean {\n    if (typeof window === 'undefined') return false;\n    return !!localStorage.getItem('auth_token');\n  }\n\n  /**\n   * Get current user from localStorage\n   */\n  getCurrentUser(): User | null {\n    if (typeof window === 'undefined') return null;\n    \n    const userStr = localStorage.getItem('auth_user');\n    if (!userStr) return null;\n    \n    try {\n      return JSON.parse(userStr) as User;\n    } catch {\n      return null;\n    }\n  }\n\n  /**\n   * Login user\n   */\n  async login(loginData: LoginData): Promise<User> {\n    console.log('ðŸ”§ Auth login called with:', { \n      isDevelopment: this.isDevelopment, \n      baseUrl: this.baseUrl, \n      shouldUseMock: this.shouldUseMock() \n    });\n\n    if (this.shouldUseMock()) {\n      console.log('ðŸ”§ Using mock login');\n      // Simulate network delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // Mock validation\n      if (!loginData.email || !loginData.password) {\n        throw new Error('Email and password are required');\n      }\n      \n      if (loginData.password.length < 8) {\n        throw new Error('Password must be at least 8 characters long');\n      }\n\n      const user = this.generateMockUser({ email: loginData.email });\n      const session = this.generateMockSession();\n      \n      // Store in localStorage\n      localStorage.setItem('auth_token', session.token);\n      localStorage.setItem('auth_user', JSON.stringify(user));\n      \n      console.log('ðŸ”§ Mock login successful:', user);\n      return user;\n    }\n\n    console.log('ðŸ”§ Using real auth service login');\n    // Get CSRF token if not already available\n    if (!this.csrfToken) {\n      await this.getCSRFToken();\n    }\n\n    try {\n      const response = await fetch(`${this.baseUrl}/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          ...loginData,\n          csrfToken: this.csrfToken,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Login failed: ${response.status} ${response.statusText}`);\n      }\n\n      const data: AuthResponse = await response.json();\n\n      if (data.success && data.session && data.user) {\n        // Store session token in localStorage\n        localStorage.setItem('auth_token', data.session.token);\n        localStorage.setItem('auth_user', JSON.stringify(data.user));\n        return data.user;\n      }\n\n      throw new Error(data.error || 'Login failed');\n    } catch (error) {\n      console.error('Login failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Register new user\n   */\n  async signup(signupData: SignupData): Promise<User> {\n    console.log('ðŸ”§ Auth signup called with:', { \n      isDevelopment: this.isDevelopment, \n      baseUrl: this.baseUrl, \n      shouldUseMock: this.shouldUseMock() \n    });\n\n    if (this.shouldUseMock()) {\n      console.log('ðŸ”§ Using mock signup');\n      // Simulate network delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // Mock validation\n      if (!signupData.email || !signupData.password || !signupData.firstName || !signupData.lastName) {\n        throw new Error('All fields are required');\n      }\n      \n      if (signupData.password.length < 8) {\n        throw new Error('Password must be at least 8 characters long');\n      }\n\n      const user = this.generateMockUser(signupData);\n      const session = this.generateMockSession();\n      \n      // Store in localStorage\n      localStorage.setItem('auth_token', session.token);\n      localStorage.setItem('auth_user', JSON.stringify(user));\n      \n      console.log('ðŸ”§ Mock registration successful:', user);\n      return user;\n    }\n\n    console.log('ðŸ”§ Using real auth service signup');\n    // Get CSRF token if not already available\n    if (!this.csrfToken) {\n      await this.getCSRFToken();\n    }\n\n    try {\n      const response = await fetch(`${this.baseUrl}/auth/signup`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          ...signupData,\n          csrfToken: this.csrfToken,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Signup failed: ${response.status} ${response.statusText}`);\n      }\n\n      const data: AuthResponse = await response.json();\n\n      if (data.success && data.session && data.user) {\n        // Store session token in localStorage\n        localStorage.setItem('auth_token', data.session.token);\n        localStorage.setItem('auth_user', JSON.stringify(data.user));\n        return data.user;\n      }\n\n      throw new Error(data.error || 'Signup failed');\n    } catch (error) {\n      console.error('Signup failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Logout user\n   */\n  async logout(): Promise<void> {\n    if (typeof window === 'undefined') return;\n\n    const token = localStorage.getItem('auth_token');\n    \n    if (this.shouldUseMock()) {\n      console.log('ðŸ”§ Mock logout successful');\n    } else if (token) {\n      try {\n        await fetch(`${this.baseUrl}/auth/logout`, {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${token}`,\n            'Content-Type': 'application/json',\n          },\n        });\n      } catch (error) {\n        console.warn('Logout request failed:', error);\n      }\n    }\n\n    // Clear local storage regardless of API call success\n    localStorage.removeItem('auth_token');\n    localStorage.removeItem('auth_user');\n    this.csrfToken = null; // Clear CSRF token on logout\n  }\n\n  /**\n   * Validate current session\n   */\n  async validateSession(): Promise<boolean> {\n    if (typeof window === 'undefined') return false;\n\n    const token = localStorage.getItem('auth_token');\n    if (!token) return false;\n\n    if (this.shouldUseMock()) {\n      // Mock session validation - always return true if token exists\n      return true;\n    }\n\n    try {\n      const response = await fetch(`${this.baseUrl}/auth/session`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const data: AuthResponse = await response.json();\n\n      if (!data.success) {\n        // Clear invalid session\n        this.logout();\n        return false;\n      }\n\n      return true;\n    } catch (error) {\n      console.warn('Session validation failed:', error);\n      this.logout();\n      return false;\n    }\n  }\n\n  /**\n   * Health check for auth service\n   */\n  async healthCheck(): Promise<any> {\n    if (this.shouldUseMock()) {\n      return {\n        status: 200,\n        domain: 'localhost',\n        subdomain: 'mock',\n        timestamp: new Date().toISOString(),\n        mock: true\n      };\n    }\n\n    try {\n      const response = await fetch(`${this.baseUrl}/auth/health`, {\n        method: 'GET',\n      });\n      return await response.json();\n    } catch (error) {\n      console.error('Health check failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get the current base URL (useful for debugging)\n   */\n  getBaseUrl(): string {\n    return this.baseUrl;\n  }\n\n  /**\n   * Check if we're using mock mode\n   */\n  isMockMode(): boolean {\n    return this.shouldUseMock();\n  }\n}\n\n// Export a default instance\nexport const auth = new AuthClient(); "],"names":[],"mappings":"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"}