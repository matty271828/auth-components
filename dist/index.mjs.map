{"version":3,"file":"index.mjs","sources":["../src/components/AuthDemo.tsx"],"sourcesContent":["\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { CheckCircle, XCircle, AlertTriangle } from \"lucide-react\"\nimport LoginForm from \"./LoginForm\"\nimport RegistrationForm from \"./RegistrationForm\"\nimport { auth } from \"@/lib/auth\"\nimport type { User } from \"@/lib/auth\"\n\nexport default function AuthDemo() {\n  const [isLogin, setIsLogin] = useState(true)\n  const [successMessage, setSuccessMessage] = useState(\"\")\n  const [errorMessage, setErrorMessage] = useState(\"\")\n  const [isMockMode, setIsMockMode] = useState(false)\n\n  useEffect(() => {\n    // Check if we're in mock mode\n    setIsMockMode(auth.isMockMode())\n  }, [])\n\n  const handleSuccess = (user: User) => {\n    setSuccessMessage(`Welcome, ${user.firstName}! You have been successfully ${isLogin ? 'logged in' : 'registered'}.`)\n    setErrorMessage(\"\")\n  }\n\n  const handleError = (error: string) => {\n    setErrorMessage(error)\n    setSuccessMessage(\"\")\n  }\n\n  const handleFormSwitch = () => {\n    setIsLogin(!isLogin)\n    setSuccessMessage(\"\")\n    setErrorMessage(\"\")\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-4 bg-gray-50\">\n      <div className=\"w-full max-w-md space-y-4\">\n        {/* Mock Mode Warning */}\n        {isMockMode && (\n          <Card className=\"border-yellow-200 bg-yellow-50\">\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center space-x-2 text-yellow-700\">\n                <AlertTriangle className=\"h-5 w-5\" />\n                <div>\n                  <p className=\"text-sm font-medium\">Development Mode</p>\n                  <p className=\"text-xs text-yellow-600\">\n                    Using mock authentication. No real auth service is connected.\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Success/Error Messages */}\n        {successMessage && (\n          <Card className=\"border-green-200 bg-green-50\">\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center space-x-2 text-green-700\">\n                <CheckCircle className=\"h-5 w-5\" />\n                <p className=\"text-sm font-medium\">{successMessage}</p>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {errorMessage && (\n          <Card className=\"border-red-200 bg-red-50\">\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center space-x-2 text-red-700\">\n                <XCircle className=\"h-5 w-5\" />\n                <p className=\"text-sm font-medium\">{errorMessage}</p>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Form Toggle */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-center\">Authentication Demo</CardTitle>\n            <CardDescription className=\"text-center\">\n              {isMockMode \n                ? \"Testing the authentication components with mock data\"\n                : \"Test the authentication components with the auth service\"\n              }\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex space-x-2\">\n              <Button\n                variant={isLogin ? \"default\" : \"outline\"}\n                onClick={() => setIsLogin(true)}\n                className=\"flex-1\"\n              >\n                Login\n              </Button>\n              <Button\n                variant={!isLogin ? \"default\" : \"outline\"}\n                onClick={() => setIsLogin(false)}\n                className=\"flex-1\"\n              >\n                Register\n              </Button>\n            </div>\n            \n            <div className=\"text-center\">\n              <Button variant=\"link\" onClick={handleFormSwitch} className=\"text-sm\">\n                {isLogin ? \"Don't have an account? Sign up\" : \"Already have an account? Sign in\"}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Auth Form */}\n        {isLogin ? (\n          <LoginForm \n            onSuccess={handleSuccess}\n            onError={handleError}\n          />\n        ) : (\n          <RegistrationForm \n            onSuccess={handleSuccess}\n            onError={handleError}\n          />\n        )}\n      </div>\n    </div>\n  )\n} "],"names":[],"mappings":"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"}